/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package risiko;

import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import static risiko.MenuNewPartita.verificaCarattere;
import static risiko.Query.catturaErrori;

/**
 *
 * @author ikaros
 */
/* 
    DESCRIZIONE GENERALE

Classe adibita per la visualizzazione delle informazioni relative un singolo giocatore scelto.
Una volta selezinata la partita e il giocatore si provvederà a compilare i seguenti campi:

- Info sul giocatore
    Composto da:
    - Nickname: mostra il nickname scelto dal giocatore
    - Colore: colore scelto dal giocatore
    - Id conferito: è l'id che il database ha assegnato al giocatore (in ogni partita l'id va da 1 a 6)
    - N° armate in gioco: sono il numero di armate totali che il giocatore dispone in campo
    - Obiettivo: è la descizione del'obiettivo che gli è stato assegnato 
    - Carte che ha in mano: sono le carte che il giocatore dispone

- Info sui combattimenti
    Composto da:
    - N° combattimenti fatti: sono il numero di combattimenti che il giocatore ha fatto
    - N° territori conquistati: numero dei territori che ha conquistato nelle sue lotte
    - Quante volte ha tirato il dado: numero di volte in cui ha tirato il dado
    - Combattimenti effettuati: mostra in maniera limitata (per approfondimenti si veda InfoTurno) 
      i combattimenti fatti dal giocatore mostrando il territorio d'attacco e quello che si è attaccato.
    - Territori conquistati: mostra il nome dei territori che il giocatore ha conquistato
    - Territori odrinati in base al numero di armate: mostra i territori con il max numero di armate in maniera decrescente
    - Giudizio finale: serie di frasi che vengono mostrate al giocatore in base a tre parametri: numero armate totali
      numero dei territori conquistati e numero dei combattimenti effettuati.

*/
public class InfoGiocatore extends javax.swing.JFrame {

    /**
     * Creates new form InfoGiocatore
     */
    public InfoGiocatore() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Informazioni su: Giocatore");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Inserisci il nome della partita");

        jTextField1.setText("nome partita..");
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Partite presenti");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Passo 1");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Passo 2");
        jLabel4.setEnabled(false);

        jScrollPane2.setEnabled(false);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel5.setText("Inserisci il nome del giocatore");
        jLabel5.setEnabled(false);

        jTextField2.setText("nome giocatore..");
        jTextField2.setEnabled(false);
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField2KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Giocatori presenti");
        jLabel6.setEnabled(false);

        jButton1.setText("Mostra i giocatori");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Mostra info");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Info sul giocatore");
        jLabel7.setEnabled(false);

        jTextField3.setEditable(false);
        jTextField3.setEnabled(false);

        jLabel8.setText("Nickname");
        jLabel8.setEnabled(false);

        jLabel9.setText("Colore");
        jLabel9.setEnabled(false);

        jTextField4.setEditable(false);
        jTextField4.setEnabled(false);

        jLabel10.setText("ID conferito");
        jLabel10.setEnabled(false);

        jTextField5.setEditable(false);
        jTextField5.setEnabled(false);

        jLabel11.setText("Obiettivo");
        jLabel11.setEnabled(false);

        jTextField6.setEditable(false);
        jTextField6.setEnabled(false);

        jLabel12.setText("N° armate in gioco");
        jLabel12.setEnabled(false);

        jTextField7.setEditable(false);
        jTextField7.setEnabled(false);

        jLabel13.setText("Carte che ha in mano");
        jLabel13.setEnabled(false);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Info sui combattimenti");
        jLabel14.setEnabled(false);

        jTextField9.setEditable(false);
        jTextField9.setEnabled(false);

        jLabel15.setText("N° combattimenti fatti");
        jLabel15.setEnabled(false);

        jTextField10.setEditable(false);
        jTextField10.setEnabled(false);

        jLabel16.setText("N° territori conquistati");
        jLabel16.setEnabled(false);

        jScrollPane3.setEnabled(false);

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jTextArea3.setEnabled(false);
        jScrollPane3.setViewportView(jTextArea3);

        jLabel17.setText("Combattimenti effettuati");
        jLabel17.setEnabled(false);

        jScrollPane4.setEnabled(false);

        jTextArea4.setEditable(false);
        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jTextArea4.setEnabled(false);
        jScrollPane4.setViewportView(jTextArea4);

        jLabel18.setText("Territori conquistati");
        jLabel18.setEnabled(false);

        jTextField11.setEditable(false);
        jTextField11.setEnabled(false);

        jLabel19.setText("Quante volte ha tirato il dado");
        jLabel19.setEnabled(false);

        jLabel20.setText("Giudizio finale");
        jLabel20.setEnabled(false);

        jScrollPane5.setEnabled(false);

        jTextArea5.setEditable(false);
        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jTextArea5.setEnabled(false);
        jScrollPane5.setViewportView(jTextArea5);

        jButton3.setText("Cambia partita");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Indietro");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jScrollPane6.setEnabled(false);

        jTextArea6.setEditable(false);
        jTextArea6.setColumns(20);
        jTextArea6.setRows(5);
        jTextArea6.setEnabled(false);
        jScrollPane6.setViewportView(jTextArea6);

        jLabel21.setText("Territori ordinati in base al numero di armate");
        jLabel21.setEnabled(false);

        jTextArea7.setEditable(false);
        jTextArea7.setColumns(20);
        jTextArea7.setRows(5);
        jTextArea7.setEnabled(false);
        jScrollPane7.setViewportView(jTextArea7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField1)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextField2)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton4))
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9))
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField6)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 48, Short.MAX_VALUE))))
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane5)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel19)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel16)
                                .addGap(14, 14, 14)
                                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel17)
                            .addComponent(jLabel20))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jScrollPane7))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel13)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel14)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel19)
                                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel21))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1)
                        .addGap(12, 12, 12)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addGap(53, 53, 53)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(12, 12, 12)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // APERTURA FORM: INFO GIOCATORE 
        
      /* Dichiarazione variabili */
      Connection conn = null;
      PreparedStatement rset = null;
      String partita = null;
       
      /* Query da effettuare */
      String query = "SELECT NOME_PARTITA FROM PARTITA";
        
      try
       {
         conn = ConnessioneDB.getDefaultConnection();
         rset = conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
         ResultSet respartita = rset.executeQuery();
            
         /* Prelevo e mostro ogni partita */
         while(respartita.next())
            {
               partita = respartita.getString("NOME_PARTITA");
               jTextArea1.append(partita + "\n");        
            }
       }catch(SQLException e)
            {
              catturaErrori(e);
            }finally 
                   { 
                      Query.conrsetClose(conn, rset);
                   }      
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // BOTTONE: MOSTRA I GIOCATORI
       
        /* Dichiarazione variabili */
        Component err = null;
        Connection conn = null;
        PreparedStatement rset = null;
        String giocatore = null;
        Query dbms = new Query();
        
        /* Prelevo l'id partita scritta dall'utente */
        String idp = dbms.idPartita(jTextField1.getText());
        
        /* La partita esiste */
        if(idp!= null)
        {
           /* Query da effettuare */
           String query = "SELECT NICKNAME FROM GIOCATORE WHERE ID_PARTITA = ?";
            
          try
           {
              /* Seleziono i nickname dei giocatori presenti nella partita specificata */
              conn = ConnessioneDB.getDefaultConnection();
              rset = conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
              rset.setString(1,idp);
              ResultSet giocatori = rset.executeQuery();

              while(giocatori.next())
              {
                 giocatore = giocatori.getString("NICKNAME");
                 jTextArea2.append(giocatore + "\n");        
              }
           }catch(SQLException e)
            {
              catturaErrori(e);
            }finally 
                   { 
                      Query.conrsetClose(conn, rset);
                   }
            
            /* Adatto i componenti */
            jLabel4.setEnabled(true);
            jLabel5.setEnabled(true);
            jLabel6.setEnabled(true);
            jTextArea2.setEnabled(true);
            jTextField2.setEnabled(true);
            jButton2.setEnabled(true);
            jButton3.setEnabled(true);
            jButton1.setEnabled(false);
            jTextField1.setEnabled(false);
        
        }
        else /* PArtita non esistente */
        {
            JOptionPane.showMessageDialog(err,"La partita " + jTextField1.getText() + " non esiste!" ,"Attenzione",JOptionPane.WARNING_MESSAGE); 
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // BOTTONE: CAMBIA PARTITA
        
        /* Adatto i componenti */
        jTextArea2.setText("");
        jLabel4.setEnabled(false);
        jLabel5.setEnabled(false);
        jLabel6.setEnabled(false);
        jTextArea2.setEnabled(false);
        jTextField2.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
        jButton1.setEnabled(true);
        jTextField1.setEnabled(true);
        jButton1.setEnabled(true);
        jTextArea3.setEnabled(false);
        jTextArea4.setEnabled(false);
        jTextArea5.setEnabled(false);
        jTextArea6.setEnabled(false);
        jTextArea7.setEnabled(false);
        jLabel7.setEnabled(false);
        jLabel8.setEnabled(false);
        jLabel9.setEnabled(false);
        jLabel10.setEnabled(false);
        jLabel11.setEnabled(false);
        jLabel12.setEnabled(false);
        jLabel13.setEnabled(false);
        jLabel14.setEnabled(false);
        jLabel15.setEnabled(false);
        jLabel16.setEnabled(false);
        jLabel17.setEnabled(false);
        jLabel18.setEnabled(false);
        jLabel19.setEnabled(false);
        jLabel20.setEnabled(false);
        jLabel21.setEnabled(false);
        jTextField3.setEnabled(false);
        jTextField4.setEnabled(false);
        jTextField5.setEnabled(false);
        jTextField6.setEnabled(false);
        jTextField7.setEnabled(false);
        jTextField9.setEnabled(false);
        jTextField10.setEnabled(false);
        jTextField11.setEnabled(false);     
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // BOTTONE: INDIETRO
        
        this.setVisible(false);
        dispose();
        new Info().setVisible(true);
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // BOTTONE: MOSTRA INFO
        
        /* Dichiarazione variabili */
        Component err = null;
        Query dbms = new Query();
       
        /* Prendo l'id della partita specificata */
        String idp = dbms.idPartita(jTextField1.getText());
        /* In base alla partita prendo l'id del giocatore */
        int idg = dbms.InfoIdGiocatore(idp,jTextField2.getText());
        
        /* Il giocatore esiste */
        if(idg != 0)
        {
            /* Adatto i componeneti */
            jButton1.setEnabled(false);
            jTextArea3.setEnabled(true);
            jTextArea4.setEnabled(true);
            jTextArea5.setEnabled(true);
            jTextArea6.setEnabled(true);
            jTextArea7.setEnabled(true);
            jLabel7.setEnabled(true);
            jLabel8.setEnabled(true);
            jLabel9.setEnabled(true);
            jLabel10.setEnabled(true);
            jLabel11.setEnabled(true);
            jLabel12.setEnabled(true);
            jLabel13.setEnabled(true);
            jLabel14.setEnabled(true);
            jLabel15.setEnabled(true);
            jLabel16.setEnabled(true);
            jLabel17.setEnabled(true);
            jLabel18.setEnabled(true);
            jLabel19.setEnabled(true);
            jLabel20.setEnabled(true);
            jLabel21.setEnabled(true);
            jTextField3.setEnabled(true);
            jTextField4.setEnabled(true);
            jTextField5.setEnabled(true);
            jTextField6.setEnabled(true);
            jTextField7.setEnabled(true);
            jTextField9.setEnabled(true);
            jTextField10.setEnabled(true);
            jTextField11.setEnabled(true);
            
            /* Setto il nickname del giocatore */
            jTextField3.setText(jTextField2.getText());
            /* Setto l'id del giocatore */
            jTextField5.setText(String.valueOf(idg));
            /* Prendo il colore del giocatore */
            String colore = dbms.InfoColore(idp,idg);
            /* In base alla lettera mostro al giocatore il nome */
            switch(colore)
            {
                case "R":
                    jTextField4.setText("Rosso");
                    break;
                case "G": 
                    jTextField4.setText("Giallo");
                    break;
                case "N": 
                    jTextField4.setText("Nero");
                    break;
                case "U":    
                    jTextField4.setText("Viola");
                    break;
                case "V":    
                    jTextField4.setText("Verde");
                    break;  
                case "B":    
                    jTextField4.setText("Blu");
                    break;
                default:
                    jTextField4.setText("Per dinci! Pare che qualcuno abbia violato il database!");
                    break;
            }
            /* Prendo il numero di armate totali e le mostro */
            String nArmate = dbms.armateTotali(idp,String.valueOf(idg));
            jTextField7.setText(nArmate);
            /* Prendo la descrizione dell'obiettivo e lo mostro */
            String obiettivo = dbms.CartaOb(idp,String.valueOf(idg));
            jTextField6.setText(obiettivo);
            
            /* Dichiarazione variabili */
            Connection conn = null;
            PreparedStatement rset = null;
            String simbolo = null;
            jTextArea6.setText("");
            jTextArea7.setText("");
            
            /* Query da effettuare */
            String query = "SELECT SIMBOLO_CARTA FROM CARTA_TERRITORIO T JOIN ASS_CARTA_TERRITORIO_GIOCATORE A ON (T.ID_CARTA = A.ID_CARTA) WHERE ((A.ID_PARTITA = ?) AND (A.ID_GAMER = ?))";

            try
            {
              /* Prendo le carte che il giocatore ha in mano */
              conn = ConnessioneDB.getDefaultConnection();
              rset = conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
              rset.setString(1,idp);
              rset.setInt(2,idg);
              ResultSet cart = rset.executeQuery();
            
              while(cart.next())
               {
                 simbolo = cart.getString("SIMBOLO_CARTA");
                 
                 switch(simbolo)
                 {
                     case "A":   
                       jTextArea6.append("Artigliere - ");
                       break;
                     case "C":
                       jTextArea6.append("Cavaliere - ");
                       break;
                     case "F":
                       jTextArea6.append("Fante - ");
                       break;
                     case "J":
                       jTextArea6.append("Jolly - ");
                       break;     
                     default:
                       jTextArea6.append("Peron il distruttore! ");
                       break;
                 }
                
               } 
            }catch(SQLException e)
                {
                  catturaErrori(e);
                }finally 
                  { 
                    Query.conrsetClose(conn, rset);
                  }
             
            jTextArea6.append("Fine carte");
            
            /* PRendo il numero di combattimenti effettuati e lo mostro */
            int comb = dbms.InfoCombattimenti(idp,idg);
            jTextField9.setText(String.valueOf(comb));
            
            /* Prendo il numero di territori conquistati e lo mostro */
            int terrconq = dbms.InfoCombConquistato(idp,idg);
            jTextField10.setText(String.valueOf(terrconq));
            
            jTextArea3.setText("");
            jTextArea4.setText("");
           
            /* Se uguale a zero allora non ci sono combattimenti e quindi nessun territorio conquistato */
            if(comb == 0)
            {
              jTextArea3.setText("Non ci sono combattimenti!");
              jTextArea4.setText("Non ci sono territori conquistati");
            }
            else /* E' presente almeno un combattimento */
            {
                /* Prendo il numero di dadi lanciati e lo setto */
                int dadi = dbms.InfoLancioDadi(idp,idg);
                jTextField11.setText(String.valueOf(dadi));
                
                /* Dichiarazione variabili */
                int terrAtt = 0;
                int terrDif = 0;

                /* Query da effettuare */
                query = "SELECT ID_TERRITORIO_ATTACCANTE, ID_TERRITORIO_ATTACCATO FROM COMBATTIMENTO C JOIN TURNO T ON (C.ID_TURNO = T.ID_TURNO) WHERE ((T.ID_GAMER = ?) AND (C.ID_PARTITA = ?))";

                try
                {
                  /* Prendo le infomazioni sui territori attaccante e attaccato */
                  conn = ConnessioneDB.getDefaultConnection();
                  rset = conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                  rset.setInt(1,idg);
                  rset.setString(2,idp);
                  ResultSet terr = rset.executeQuery();


                  while(terr.next())
                  {
                    terrAtt = terr.getInt("ID_TERRITORIO_ATTACCANTE");
                    terrDif = terr.getInt("ID_TERRITORIO_ATTACCATO");
                    /* Ottengo i nomi dei territori */
                    String terA = dbms.nomeTerritorio(String.valueOf(terrAtt));
                    String terD = dbms.nomeTerritorio(String.valueOf(terrDif));
                    /* Informo l'utente */
                    jTextArea3.append("Territorio d'attacco: " + terA + "\nTerritorio attaccato: " + terD + "\n-\n");
                  } 
                }catch(SQLException e)
                      {
                        catturaErrori(e);
                      }finally 
                             { 
                                Query.conrsetClose(conn, rset);
                             }

                jTextArea3.append("Fine combattimenti!");
                
                /* Query da effettuare */
                query = "SELECT ID_TERRITORIO_ATTACCATO FROM COMBATTIMENTO C JOIN TURNO T ON (C.ID_TURNO = T.ID_TURNO) WHERE ((T.ID_GAMER = ?) AND (C.ID_PARTITA = ?) AND (VINCENTE = 1))";

                try
                {
                  /* Prendo i territori che sono stati conquistati */
                  conn = ConnessioneDB.getDefaultConnection();
                  rset = conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                  rset.setInt(1,idg);
                  rset.setString(2,idp);
                  ResultSet terr = rset.executeQuery();
            
                  while(terr.next())
                  {
                    terrDif = terr.getInt("ID_TERRITORIO_ATTACCATO");
                    /* Ottengo il nome del territorio */
                    String terConq = dbms.nomeTerritorio(String.valueOf(terrDif));
                    jTextArea4.append(terConq +"\n");
                  } 
                 }catch(SQLException e)
                      {
                        catturaErrori(e);
                      }finally 
                             { 
                                Query.conrsetClose(conn, rset);
                             }   
                jTextArea4.append("Fine territori!");
            }
            
            /* Dichiarazione variabili */
            int idter = 0;
            int qtruppe = 0;
            
            /* Query da effettuare */
            query = "SELECT ID_TERRITORIO , QUANTITA_TRUPPE FROM TERRITORIO_OCCUPATO WHERE ((ID_PARTITA = ?) AND (GIOCATORE_OCCUPANTE = ?)) ORDER BY QUANTITA_TRUPPE DESC";
            
            try
            {
                /* Prendo i territori che sono stati conquistati */
                conn = ConnessioneDB.getDefaultConnection();
                rset = conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                rset.setString(1,idp);
                rset.setInt(2,idg);
                ResultSet terr = rset.executeQuery();
            
                while(terr.next())
                {
                  idter = terr.getInt("ID_TERRITORIO");
                  qtruppe = terr.getInt("QUANTITA_TRUPPE");
                  /* Ottengo il nome del territorio */
                  String terConq = dbms.nomeTerritorio(String.valueOf(idter));
                  jTextArea7.append(terConq + " - Truppe: " + qtruppe + "\n");
                } 
               }catch(SQLException e)
                    {
                      catturaErrori(e);
                    }finally 
                       { 
                         Query.conrsetClose(conn, rset);
                        }   
            
            
            
           /* Converto ad intero il numero di armate totali che ha il giocatore */
           int arm = Integer.parseInt(nArmate);
           /* Invio il numero tot di armate, il numero di combattimenti e il numero di territori conquistati alla funzione */
           giudizio(arm,comb,terrconq); 
            
        }
        else /* Il giocatore non esiste */
        {
          JOptionPane.showMessageDialog(err,"Il giocatore " + jTextField2.getText() + " non esiste!" ,"Attenzione",JOptionPane.WARNING_MESSAGE); 
        }    
         
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        // KEY TYPED PER LA VERIFICA DEL NOME DELLA PARTITA
     
       /* Prendo il carattere digitato */
       char c = evt.getKeyChar();
       /* Verifico che sia accettabile */
       int i = verificaCarattere(c);
       /* Carattere non consono lo scarto */
       if(i != 1) evt.consume();
       /* Imposto lunghezza massima di 20 caratteri */
       if(jTextField1.getText().length()>= 20) evt.consume();      
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        // KEY TYPED PER LA VERIFICA DEL NOME DEL GIOCATORE
       
        /* Prendo il carattere digitato */
       char c = evt.getKeyChar();
       /* Verifico che sia accettabile */
       int i = verificaCarattere(c);
       /* Carattere non consono lo scarto */
       if(i != 1) evt.consume();
       /* Imposto lunghezza massima di 20 caratteri */
       if(jTextField2.getText().length()>= 10) evt.consume();   
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        // KEY PRESSED PER IL NOME DELLA PARTITA
       
        /* Elimino la possibilità di usare incolla */
        jTextField1.setTransferHandler(null);
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyPressed
        // KEY PRESSED PER IL NOME DEL GIOCATORE
       
        /* Elimino la possibilità di usare incolla */
        jTextField2.setTransferHandler(null);
    }//GEN-LAST:event_jTextField2KeyPressed

 /* Funzione di appoggio per mostrare il giudizio in base ai parametri presi */
 public void giudizio(int arm, int comb,int terrconq)
 {
    jTextArea5.setText("");
    esprimi(arm,1);
    esprimi(comb,2);
    esprimi(terrconq,3);
 }

/* Funzione principale che in base ai parametri inviati provvede a informare l'utente sulla sua condizione */
public void esprimi(int var, int id)
{
    /*
        1-> Numero di armate nel gioco
        2-> Numero di combattimenti fatti
        3-> Numero di territori conquistati
    */
     if(var == 0)
     {
         if(id == 1) jTextArea5.append("Hai combattuto fino all'utlimo, ma ti sei dimostrato troppo debole verso il nemico. Una sconfitta che non si dovrà mai più ripete.\n");
         if(id == 2) jTextArea5.append("Sei una persona conservatrice che preferisce non attaccare nessuno. Sei sicuro che sia la mossa giusta?\n");
         if(id == 3) jTextArea5.append("Preferisci rimuginare sulle strategie senza mai conquistare un nuovo territorio. Sicuro di voler giocare a risiko?\n");
     }
     else
     {
         if(var >= 1 && var <= 20)
         {
            if(id == 1) jTextArea5.append("Disponi di un numero non elevato di armate, ma è ancora tutto da vedere.\n");
            if(id == 2) jTextArea5.append("Sei una persona abbastanza combattiva, ma per ottenere la vittoria devi usare al meglio le tue armate nei combattimenti.\n");
            if(id == 3) jTextArea5.append("Stai iniziando a conquistare un buon numero di territori, continua così.\n");
         }
         else
         {
           if(var >= 21 && var <= 50)
           {
             if(id == 1) jTextArea5.append("Hai un numero di armate sufficienti per poter iniziare ad ampliare il tuo dominio\n");
             if(id == 2) jTextArea5.append("Sei un ottimo generale, hai perseguito numerosi combattimenti. Continua così!\n");
             if(id == 3) jTextArea5.append("Sei un ottimo conquistatore, ora la tua prossima mossa è annientare tutti!\n");
           }
           else
            {
               if(var >= 51)
               {
                 if(id == 1) jTextArea5.append("Hai un numero sufficiente di armate per poter spazzare i tuoi nemici!\n");
                 if(id == 2) jTextArea5.append("Hai raggiunto il livello massimo di combattimenti, sei pronto per andare realmente in guerra\n");
                 if(id == 3) jTextArea5.append("Cosa?! Da quando nel risiko ci sono più di 50 territori!\n");
               }
             }
         }
     }

}
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextArea6;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
