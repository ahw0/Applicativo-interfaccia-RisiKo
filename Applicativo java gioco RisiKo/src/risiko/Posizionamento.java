/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package risiko;

import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import javax.swing.JOptionPane;
import static risiko.Combattimento.verificaTerritorio;
import static risiko.Query.catturaErrori;

/**
 *
 * @author ikaros
 */
/*
    DESCRIZIONE GENERALE

Prima fase delle tre principali che permettono 

*/
public class Posizionamento extends javax.swing.JFrame {

    /**
     * Creates new form Posizionamento
     */
    public Posizionamento() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jLabel15 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fase 1: Posizionamento");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel3.setText("Partita N°");

        jTextField2.setEditable(false);

        jLabel1.setText("Tocca a");

        jTextField1.setEditable(false);

        jLabel9.setText("Il tuo ID");

        jTextField10.setEditable(false);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel8.setText("Carri sul territorio");

        jLabel2.setText("I tuoi territori");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Tipo inserimento");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--SCEGLI--", "Inserimento Classico", "Inserimento Combinazione carte" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Nome territorio");

        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField3KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });

        jLabel7.setText("N° armate max che si possono inserire");

        jTextField4.setEditable(false);
        jTextField4.setText("Seleziona tipo inserimento");

        jButton1.setText("Inserisci carri");
        jButton1.setToolTipText("Posiziona le armate");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Mostra territori confinanti");
        jButton2.setToolTipText("Vegono mostrati tutti i territori confinanti (tuoi e nemici)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jLabel6.setText("Territori confinanti");

        jButton3.setText("?");
        jButton3.setToolTipText("help");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel10.setText("Le tue carte");

        jTextArea4.setEditable(false);
        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        jLabel12.setText("N° turno");

        jTextField12.setEditable(false);

        jLabel11.setText("N° armate");

        jTextField5.setText("0");
        jTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField5KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField5KeyTyped(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- SCEGLI --", "3 Cavalieri (CCC)", "3 Fanti (FFF)", "3 Artiglieri (AAA)", "1 Fante + 1 Cavaliere + 1 Artigliere (FCA)", "1 Jolly + 2 Cavalieri (JCC)", "1 Jolly + 2 Fanti (JFF)", "1 Jolly + 2 Artiglieri (JAA)" }));
        jComboBox2.setEnabled(false);

        jLabel13.setText("Nome partita");

        jTextField13.setEditable(false);

        jLabel14.setText("Il tuo obiettivo");

        jTextArea5.setEditable(false);
        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jScrollPane5.setViewportView(jTextArea5);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("Carte");
        jLabel15.setEnabled(false);

        jButton4.setText("Usa combinazione");
        jButton4.setToolTipText("usa la combinazione di carte selezionata");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel3))
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, 256, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12)
                                            .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel4)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel10)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(20, 20, 20)
                                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel9))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 20, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel13)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                                    .addComponent(jTextField13)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField12)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)))
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addGap(49, 49, 49)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        jLabel7.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // APERTURA FORM POSIZIONAMENTO
        
        /* Dichiarazoine variabili */
        Query dbms = new Query();
        Insert ins = new Insert();
        
        /* Prelevo l'id della partita e lo setto */
        String id_p = dbms.idPartita(MenuNewPartita.salvaPartita.nomePartita);
        jTextField2.setText(id_p);
        /* Setto il nome della partita */
        jTextField13.setText(MenuNewPartita.salvaPartita.nomePartita);
        
        /* Incremento il turno per selezionare il giocatore */
        ins.incrementaTurno(id_p);
        
        /* Prelevo il turno appena incrementato */
        String id_turno_max = dbms.maxIDTurno(id_p);
        /* Setto il turno */
        jTextField12.setText(id_turno_max);
        
        /* Prelevo il giocatore a cui tocca e lo setto */
        String id_gamer = dbms.idGamer(id_p, id_turno_max);
        jTextField10.setText(id_gamer);   
        
        /* Prelevo il nickname del giocatore e lo setto */
        String nick = dbms.nicknameGiocatore(id_gamer,id_p);
        jTextField1.setText(nick);
        
        /* Pulisco l'area riservata alla carte */
        jTextArea4.setText("");
        
        /* Prelevo e setto la descrizione dell'obiettivo */
        String ob = dbms.CartaOb(id_p,id_gamer);
        jTextArea5.setText(ob);
        
        /* Dichiarazione variabili */
        Connection conn = null;
        PreparedStatement rset = null;
        
        /* Inserisco le infomazione sul turno e il giocatore nel file */
        Insert.logFile("");
        Insert.logFile("PRIMA FASE: POSIZIONAMENTO");
        Insert.logFile("Tuno n° " + id_turno_max + ". Giocatore:" + nick);
        
        try
        {       
            /* Interrogazione per mostrare i territori e le truppe del giocatore */
            conn = ConnessioneDB.getDefaultConnection();
            rset = conn.prepareStatement("SELECT ID_TERRITORIO, QUANTITA_TRUPPE FROM TERRITORIO_OCCUPATO WHERE ((GIOCATORE_OCCUPANTE = ?) AND (ID_PARTITA = ?))");
            rset.setString(1,id_gamer);
            rset.setString(2,id_p);
            ResultSet id_territorio_del_giocatore = rset.executeQuery();
            
            /* Ad ogni id territorio viene chiamata un'altra interrogazione per prelevare il nome */
            while(id_territorio_del_giocatore.next())
             {
                String id_territorio = id_territorio_del_giocatore.getString("ID_TERRITORIO");
                int quantita_truppe = id_territorio_del_giocatore.getInt("QUANTITA_TRUPPE");

                String nome_territorio = dbms.nomeTerritorio(id_territorio);

                jTextArea1.append(nome_territorio + "\n");
                jTextArea2.append(quantita_truppe + "\n");
             }
           
            /* Interrogazione per prelevare tutte le carte del giocatore corrente */
            conn = ConnessioneDB.getDefaultConnection();
            rset = conn.prepareStatement("SELECT ID_CARTA FROM ASS_CARTA_TERRITORIO_GIOCATORE WHERE ((ID_PARTITA = ?) AND (ID_GAMER = ?))");
            rset.setString(1,id_p);
            rset.setString(2,id_gamer);
            ResultSet id_carte = rset.executeQuery();
            
            /* Per ogni id carta prelevo il simbolo carta per mostrarlo */
            while(id_carte.next())
               {
                  String idcarta = id_carte.getString("ID_CARTA");
                  String simbolo_carta = dbms.simboloCarta(idcarta);
                  jTextArea4.append(simbolo_carta + " - ");                 
               }  
                 jTextArea4.append(" Fine carte ");     
       }catch(SQLException e)
            {
              catturaErrori(e);
            }finally 
                   { 
                      Query.conrsetClose(conn, rset);
                   } 
        
  
    }//GEN-LAST:event_formWindowOpened
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // BOTTONE: mostra territori confinanti
       
       /* Dichiarazione variabili */
       Component err = null;
       
       /* Pulisco l'area adibita ai territori confinanti */
       jTextArea3.setText("");
       
       /* Verifico che il nome su cui verificare i territori non sia vuoto */
       if(jTextField3.getText().equals("") )
        {
          JOptionPane.showMessageDialog(err,"Non è stato inserito nessun nome territorio. Accertarsi di completare il campo.","Attenzione",JOptionPane.WARNING_MESSAGE);
        }
       else
       {
           /* Prendo il valore */
           String nome_terr = jTextField3.getText();
           Query dbms = new Query();
           
           /* Prelevo l'id del territorio appena preso */
           int id_terr = dbms.idTerritorio(nome_terr);
           
           /* Il nome preso non è di un territorio */
           if(id_terr == 0)
            {
                JOptionPane.showMessageDialog(err,"Territorio \""+ nome_terr +"\" non presente. Verificare che la corettezza del nome!","Attenzione",JOptionPane.WARNING_MESSAGE);
            }
            else
            {
                /* Il nome inserito è di un territorio presente */
                
                /* Dichiarazione variabili */
                Connection conn = null;
                PreparedStatement rset = null;
                
                try
                {              
                    /* Prelevo i confini del territorio */
                    conn = ConnessioneDB.getDefaultConnection();
                    rset = conn.prepareStatement("SELECT ID_CONFINANTE FROM CONFINE WHERE ID_TERRITORIO = ?");
                    rset.setInt(1,id_terr);
                    ResultSet conf = rset.executeQuery();
                    
                    /* Per ogni confinanete viene preso il nome e mostrato all'utente */
                    while(conf.next())
                    {
                       String id_confinante = conf.getString("ID_CONFINANTE");
                       nome_terr = dbms.nomeTerritorio(id_confinante);
                       jTextArea3.append(nome_terr + "\n");                         
                    }         
                 }catch(SQLException e)
                    {
                      catturaErrori(e);
                    }finally 
                           { 
                              Query.conrsetClose(conn, rset);
                           }     
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // AZIONE SULLA SELEZIONE DEL TIPO INSERIMENTO: INSERIMENTO CLASSICO O CON COMBINAZIONE CARTE
        
        /* Dichiarazione variabili */
        Connection conn = null;
        CallableStatement cs = null;
        PreparedStatement rset = null;
        int id_partita = 0 ;
        int id_turno = 0;
        int id_gamer = 0;
        int max_carri = 0;
   
        /* Verifico che sia stato scelto inserimento classico */
        if(jComboBox1.getSelectedItem().toString().equals("Inserimento Classico"))
        {
           /* Setto le altre componenti per disabilitare l'inserimento tramite combinazione */
           jComboBox2.setEnabled(false);
           jLabel15.setEnabled(false);
           jButton4.setEnabled(false);
           jButton1.setEnabled(true);
           
           /* Prendo l'id della partita */
           String idp = jTextField2.getText();
           id_partita = Integer.parseInt(idp);
           
           /* Prendo l'id del giocatore */
           String idg = jTextField10.getText();
           id_gamer = Integer.parseInt(idg);
            
           try{
             /* Viene chiamata la funzione inserimento_classico passandogli i 
                parametri appena presi per verificare il valore d'uscita.
                La funzione ha il compito di portare in uscita il numeri di carri
                a cui ha diritto il giocatore in base alle regole di gioco. */
                conn = ConnessioneDB.getDefaultConnection();
                cs =conn.prepareCall ("{? = call Inserimento_Classico(?,?)}");
                cs.registerOutParameter(1,Types.NUMERIC);
                cs.setString(2,idp);
                cs.setString(3,idg);
                cs.execute();
                /* Prelevo il risultato */
                max_carri = cs.getInt(1);
                //System.out.println("A:"+ max_carri);
                 
                /* Converto come stringa il valore dei carri ottenuti e li mostro all'utente */
                String carri = String.valueOf(max_carri);
                jTextField4.setText(carri);
                 
                }catch (SQLException e) {
                     Query.catturaErrori(e);
                 }
        }
        else
        {
            /* Verifico che sia stato scelto inserimento combinazione carte */
            if(jComboBox1.getSelectedItem().toString().equals("Inserimento Combinazione carte"))
            {
                // System.out.println("SCEGLI LE CARTE");
                /* Setto le altre componenti per disabilitare l'inserimento tramite combinazione classica */
                 jComboBox2.setEnabled(true);
                 jLabel15.setEnabled(true);
                 jButton4.setEnabled(true);
                 jButton1.setEnabled(false);
                 /* Informo l'utente tramite il form adibito al numero di carri che può inserire che deve
                    selezionare quale tipologia di combinazione carte vuole usare. */
                 jTextField4.setText("Seleziona combinazione carte");                
            }
            else
            {
                /* Non è stato scelto nessuna tipologia di inserimento */
                jTextField4.setText("Seleziona tipo inserimento");
                jComboBox2.setEnabled(false);
                jLabel15.setEnabled(false);
                jButton4.setEnabled(false);
                jButton1.setEnabled(false);        
            }
        }     
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // BOTTONE: INSERISCI CARRI
        
        /* Dichiarazione variabili */
        Connection conn = null;
        PreparedStatement rset = null;
        Component err = null;
    
      /* Verifico che sia stato scelto uno dei due inserimenti */
      if(jTextField4.getText().equals("Seleziona tipo inserimento"))
      {
          JOptionPane.showMessageDialog(err,"Devi scegliere tramite l'apposito menù a tendina il tipo di inserimento che vuoi effettuare!","Attenzione",JOptionPane.WARNING_MESSAGE);    
      }  
      else
      {
        /* Verifico che sia stato inserito almeno un nome e che il numero di armate non sia pari a zero */
        if(jTextField3.getText().equals("") || jTextField5.getText().equals("") || jTextField5.getText().equals("0"))
        {
            if(jTextField5.getText().equals("0"))
            {
               JOptionPane.showMessageDialog(err,"Inserire un numero di armate maggiore di zero!","Attenzione",JOptionPane.WARNING_MESSAGE);
            }
            else
            {
               JOptionPane.showMessageDialog(err,"Verificare che sia stato inserito il nome del territorio e un numero di armate!","Attenzione",JOptionPane.WARNING_MESSAGE);
            }    
        }
        else
        {
           Query dbms = new Query();
           
           /* Pelevo l'id della partita */
           String idp = dbms.idPartita(MenuNewPartita.salvaPartita.nomePartita);
           
           /* Prelevo il nome inserito dal giocatore */
           String nome_terr = jTextField3.getText();
           /* Prlelevo le armate inserite dal giocatore */
           int n_armate = Integer.parseInt(jTextField5.getText());
           /* Prelevo l'id del territorio in base al nome inserito*/
           int id_terr = dbms.idTerritorio(nome_terr);
           
           /* Se zero il nome inserito non appartiene a nessun territorio */
           if(id_terr == 0 )
            {
               JOptionPane.showMessageDialog(err,"Territorio \""+ nome_terr +"\" non presente. Verificare che la corettezza del nome!","Attenzione",JOptionPane.WARNING_MESSAGE);
            }
           else
           {
               /* Il territorio è presente, prelevo il giocatoid_terrre che occupato il territorio */
               int giocatore_occ = dbms.giocatoreOccupante(idp, id_terr);
               /* Prelevo l'id del giocatore a cui tocca */
               String stringTmp = jTextField10.getText();
               int giocatore_inCorso = Integer.parseInt(stringTmp);
               
               /* Verifico che il giocatore a cui tocca sia lo stesso a cui appartiene il territorio */
               if(giocatore_occ != giocatore_inCorso)
               {
                    String nik = dbms.nicknameGiocatore(String.valueOf(giocatore_occ),idp);
                    JOptionPane.showMessageDialog(err,"Il territorio \""+ nome_terr +"\" non è il tuo!\nAppartiene al giocatore: " + nik,"Attenzione",JOptionPane.WARNING_MESSAGE);     
               }
               else
               {
                    //stringTmp  = jTextField4.getText();  <-<-<-<
                    /* Prendo il valore delle armate massime da inserire */
                    int armateDaInserire = Integer.parseInt(jTextField4.getText());
                    
                    /* Verifico che il giocatore non inserisca un numero di armate maggiore di quelle che può */
                    if(n_armate > armateDaInserire)
                    {
                      JOptionPane.showMessageDialog(err,"Si stanno inserendo "+ n_armate +" armate invece di un massimo di "+ armateDaInserire +"!","Attenzione",JOptionPane.WARNING_MESSAGE);
                    }
                    else
                    {
                       Insert ins = new Insert();
                       
                       /* Verifico la tipologia di inserimento che vuole effettuare il giocatore */
                       if(jComboBox1.getSelectedItem().toString().equals("Inserimento Classico"))
                       {
                          /* Elimino la possibilità al giocatore di cambiare l'inserimento */
                          jComboBox1.setEnabled(false);
                          //System.out.println("INS CLASSICO");
                          /* Provvedo all'inserimento delle infomazioni appena prese  */
                          ins.isertPosArmataClassica(idp, id_terr, n_armate);
                       }
                       else /* E' stato scelto l'inserimento con carte */
                       {
                          //System.out.println("FACCIO UP IN POS CARTE");
                          /* Provvedo all'inserimento specificando la tipologia/combinazione di carte presa prima */
                          ins.insertPosArmataCarte(idp, id_terr, n_armate,tipoIns.inserimento);
                       }
                      /* Prelevo l'id del giocatore in corso */
                      stringTmp = jTextField10.getText();
                      /* Prendo il numero di armate di tutti i territori del giocatore (comprese le armate appena inserite) */
                      int armate_totali = dbms.sommArmate(idp,stringTmp);
                     
                     // System.out.println("ARMATE TOTALI CON INSERIMENTO:" + armate_totali);
                      Update up = new Update();
                      
                      /* Uso tutte le armate per aggiornare il numero di armate totali del giocatore*/
                      up.upDecrArmate(idp, stringTmp , armate_totali);
                      
                      /* Scrivo sul file le informazioni relative all'inserimento */
                      String fileNomeTerr = dbms.nomeTerritorio(String.valueOf(id_terr));
                      String file = "Vengono inserite " + n_armate + " sul territorio " + fileNomeTerr ;
                      Insert.logFile(file);
                      
                      /* Se il numero di armate inserite dal giocatore corrisponde a quelle massime calcolata
                         si passa alla fase successiva */
                      if(n_armate == armateDaInserire)
                       {
                           /* Chiamo il form Combattimento */
                           this.setVisible(false);
                           dispose(); 
                           java.awt.EventQueue.invokeLater(new Runnable() {
                           public void run() {
                                new Combattimento().setVisible(true);
                              }
                                    });
                        }
                      else /* Il giocatore ha ancora delle armate da inserire */
                       {
                          /* Provvedo a pulire i territori e le armate per poi aggiornarli con i valori esatti */
                          jTextArea1.setText("");
                          jTextArea2.setText("");
                          jTextField4.setText("");
                          /* Aggiorno il valore di armate rimanenti che il giocatore deve inserire */
                          armateDaInserire = armateDaInserire - n_armate;
                          jTextField4.setText(String.valueOf(armateDaInserire));  
                            
                          try
                           {  
                              /* Interrogazione per mostrare i territori e le relative armate presenti */
                              conn = ConnessioneDB.getDefaultConnection();
                              rset = conn.prepareStatement("SELECT ID_TERRITORIO, QUANTITA_TRUPPE FROM TERRITORIO_OCCUPATO WHERE ((GIOCATORE_OCCUPANTE = ?) AND (ID_PARTITA = ?))");
                              rset.setInt(1,giocatore_inCorso);
                              rset.setString(2,idp);
                              ResultSet id_territorio_del_giocatore = rset.executeQuery();

                              while(id_territorio_del_giocatore.next())
                                {
                                    String id_territorio = id_territorio_del_giocatore.getString("ID_TERRITORIO");
                                    int quantita_truppe = id_territorio_del_giocatore.getInt("QUANTITA_TRUPPE");

                                    String nome_territorio = dbms.nomeTerritorio(id_territorio);

                                    jTextArea1.append(nome_territorio + "\n");
                                    jTextArea2.append(quantita_truppe + "\n");
                                }
                            
                            }catch(SQLException e)
                               {
                                    catturaErrori(e);
                               }finally 
                                { 
                                    Query.conrsetClose(conn, rset);
                                } 
                       }
                    }
               } 
           }
        }
      } 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyTyped
        //KEY TYPED PER EVITARE L'INSERIMENTO DI CARATTERI NEL NUMERO DI ARMATE
        
        /* Dichiarazione variabili */
        char vchar = evt.getKeyChar();
        
        if(!(Character.isDigit(vchar)) || (vchar == KeyEvent.VK_BACK_SPACE) || (vchar == KeyEvent.VK_DELETE))
        {
           evt.consume();
        }    
        /* Imposto la lunghezza massima */
        if(jTextField5.getText().length()>= 2) evt.consume();  
    }//GEN-LAST:event_jTextField5KeyTyped

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // CHIUSURA APPLICATIVO MEDIANTE LA X
        
        /* Dichiarazione variabili */
        Component inf = null;
        
        /* Informo l'utente e chiudo l'applicativo */
        JOptionPane.showMessageDialog(inf,"La partita è stata salvata.\nPuoi riprenderla quando vuoi usando Riprendi Partita nel menù principale!\n\nRicorda: se è stata inserita un'armata e ve ne sono altre da inserire, queste verranno ignorate\ne si passarà alla fase successiva combattimento!","Chiusura nella fase Combattimento",JOptionPane.INFORMATION_MESSAGE);
        Insert.logFile("");
        Insert.logFile("La partita è stata sospesa.");
        Insert.logFile("");
        System.exit(0); 
    }//GEN-LAST:event_formWindowClosing

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // BOTTONE: USA COMBINAZIONE
        
        /* Dichiarazione variabili */
        Component err = null;
        Query dbms = new Query();
        int checkComb = 0;
        int checkCarte = 0;
        
        /* Prelevo l'id della partita e del giocatore */
        String idp = jTextField2.getText();
        String idg = jTextField10.getText();
        
       /*
        Verifico il tipo di combinazione scelto dall'utente 
        Successivamente si setta il valore numerico associato alla tipologia di combinazione 
        Si passa poi alla chiamata al dbms per verificare che l'utente possieda davvero la combinazione di carte.
        Se il giocatore possiede la combinazione di carte, esse vengono automaticamente eliminate e viene settato
        il numero di carri massimi che può inserire.
       */
       if(jComboBox2.getSelectedItem().toString().equals("3 Cavalieri (CCC)"))
       {
            tipoIns.inserimento = 2;
            checkComb = dbms.callCombinazione(idp,idg,tipoIns.inserimento);
       }
        
       if(jComboBox2.getSelectedItem().toString().equals("3 Fanti (FFF)"))
       {
            tipoIns.inserimento = 3;
            checkComb = dbms.callCombinazione(idp,idg,tipoIns.inserimento);
       }
       
       if(jComboBox2.getSelectedItem().toString().equals("3 Artiglieri (AAA)"))
       {
            tipoIns.inserimento = 4;
            checkComb = dbms.callCombinazione(idp,idg,tipoIns.inserimento);
       }
       
       if(jComboBox2.getSelectedItem().toString().equals("1 Fante + 1 Cavaliere + 1 Artigliere (FCA)"))
       {
            tipoIns.inserimento = 5;
            checkComb = dbms.callCombinazione(idp,idg,tipoIns.inserimento);    
       }
       
       if(jComboBox2.getSelectedItem().toString().equals("1 Jolly + 2 Cavalieri (JCC)"))
       {
            tipoIns.inserimento = 6;
            checkComb = dbms.callCombinazione(idp,idg,tipoIns.inserimento);
       }
       
       if(jComboBox2.getSelectedItem().toString().equals("1 Jolly + 2 Fanti (JFF)"))
       {
            tipoIns.inserimento = 7;
            checkComb = dbms.callCombinazione(idp,idg,tipoIns.inserimento);
       }
       
       if(jComboBox2.getSelectedItem().toString().equals("1 Jolly + 2 Artiglieri (JAA)"))
       {
            tipoIns.inserimento = 8;
            checkComb = dbms.callCombinazione(idp,idg,tipoIns.inserimento);
       }
       
       if(jComboBox2.getSelectedItem().toString().equals("-- SCEGLI --"))
       {
            JOptionPane.showMessageDialog(err,"Devi scegliere tramite l'apposito menù a tendina il tipo di combinazione che vuoi effettuare!","Attenzione",JOptionPane.WARNING_MESSAGE);            
            checkCarte = 1;
       }
       
       /* Controllo che sia stata scelta una combinazione */
       if(checkCarte == 0)
       {
           /* Controllo che il giocatore abbia la combinazione di carte */
           if(checkComb == 0)
           {
             JOptionPane.showMessageDialog(err,"Non disponi della combinazione di carte selezionata!","Attenzione",JOptionPane.WARNING_MESSAGE);                       
           }
           else
           {
               /* Il giocatore possiede le carte */
               
               /* Setto il numero di armate massime che il giocatore deve inserire */
               jTextField4.setText(String.valueOf(checkComb));
               /* Setto i componenti per evitare che il giocatore posso compiere azioni diverse */
               jComboBox2.setEnabled(false);
               jButton4.setEnabled(false);
               jComboBox1.setEnabled(false);
               jButton1.setEnabled(true);
           }
       } 
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // BOTTONE: ?
        
        /* Dichiarazione variabili */
        Component inf = null;
        JOptionPane.showMessageDialog(inf,"Per visualizzare i territori confinanti devi prima inserire il nome di un territorio e poi cliccare sul pulsante \"Mostra territori confinanti\".\nQuesta funzionalità"
                 + " può essere utile per scegliere in modo strategico dove posizionare le proprie armate.\n\nTipo inserimento si divide in due parti: inserimento classico o tramite combinazione di carte.\nScelto il primo "
                 + "verranno inserite in \"N°armate max che si possono inserire\" il numero di armate massime in base al regolamento del gioco.\nScelto il secondo potrai selezionare una combinazione di carte in base a quelle che possiedi "
                 + "e una volta cliccato sul bottone \"usa combinazione\"\nverranno mostrate il numero di armate massime che puoi inserire.\n<html><b>Puoi inserire le armate che avrai a disposizione anche in più territori.</b></html>\n\nUna volta che tutte le "
                 + "armate sono state inserite si passa alla fase successiva.","?",JOptionPane.INFORMATION_MESSAGE);     
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
       // KEY TYPED PER L'INSERIMENTO CORRETTO DEL NOME DEL TERRITORIO
        
       /* Prendo il carattere digitato */
       char c = evt.getKeyChar();
       /* Verifico che sia accettabile */
       int i = verificaTerritorio(c);
       /* Carattere non consono lo scarto */
       if(i != 1) evt.consume();
       /* Imposto lunghezza massima di 30 caratteri */
       if(jTextField3.getText().length()>= 30) evt.consume();       
    }//GEN-LAST:event_jTextField3KeyTyped

    private void jTextField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyPressed
        // KEY PRESSED PER IL NOME DEL TERRITORIO
        
        /* Elimino la possibilità di usare incolla */
        jTextField3.setTransferHandler(null);
    }//GEN-LAST:event_jTextField3KeyPressed

    private void jTextField5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyPressed
        // KEY PRESSED PER IL NUNMERO DI ARMATE
        
        /* Elimino la possibilità di usare incolla */
        jTextField5.setTransferHandler(null);
    }//GEN-LAST:event_jTextField5KeyPressed

    /*
       Classe usata per inserire il valore numerico del tipo di combinazione di carte.
       Viene richiamata quando l'utente preme su inserisci carri, utilizzando il valore
       contenuto per inviarlo alla funzione per il calcolo dei carri relativa alla combinazione.
    */
    public static class tipoIns{
        public static int inserimento = 0; 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Posizionamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Posizionamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Posizionamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Posizionamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Posizionamento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
