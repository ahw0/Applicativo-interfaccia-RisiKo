/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package risiko;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import static risiko.Combattimento.verificaTerritorio;
import static risiko.Query.catturaErrori;

/**
 *
 * @author ikaros
 */
public class Spostamento extends javax.swing.JFrame {

    /**
     * Creates new form Spostamento
     */
    public Spostamento() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField14 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fase 3: Spostamento");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTextField14.setEditable(false);

        jLabel12.setText("N° turno");

        jTextField12.setEditable(false);

        jLabel3.setText("Partita N°");

        jTextField2.setEditable(false);

        jLabel1.setText("Tocca a");

        jTextField1.setEditable(false);

        jLabel9.setText("Il tuo ID");

        jTextField10.setEditable(false);

        jLabel16.setText("Nome partita");

        jLabel2.setText("I tuoi territori");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel8.setText("Carri sul territorio");

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jLabel10.setText("Carri sul territorio");

        jLabel4.setText("I tuoi territori confinanti");

        jTextArea4.setEditable(false);
        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        jLabel5.setText("Nome territorio di partenza");

        jTextField3.setText("..inserisci..");
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField3KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });

        jLabel6.setText("Nome territorio d'arrivo");

        jTextField4.setText("..inserisci..");
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField4KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField4KeyTyped(evt);
            }
        });

        jButton1.setText("Sposta armate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Mostra confini");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel11.setText("N° armate da spostare");

        jTextField5.setText("0");
        jTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField5KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField5KeyTyped(evt);
            }
        });

        jButton2.setText("Non effettuare nessuno spostamento");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("?");
        jButton4.setToolTipText("Help");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel3))
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel6))
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel11)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField5)
                                        .addGap(39, 39, 39))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(jButton2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel12))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addGap(37, 37, 37))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel16)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(10, 10, 10)
                                .addComponent(jButton3)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2)))
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(jScrollPane3))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // BOTTONE: SPOSTA ARMATE
       
      /* Dichiarazione variabili */
      Component err = null;

     /* Verifico che il giocatore abbia inserito i valori del territorio di partenza e arribo */
     if(jTextField3.getText().equals("") || jTextField4.getText().equals(""))
     {
        JOptionPane.showMessageDialog(err,"Verificare che il nome del territorio di partenza e/o arrivo siano stati inseriti!","Attenzione",JOptionPane.WARNING_MESSAGE);
     }
     else
     {
       Query dbms = new Query();
       /* Prendo l'id della partita */
       String idp = dbms.idPartita(MenuNewPartita.salvaPartita.nomePartita);
       
       /* Prendo gli id dei territori */
       String terr_p = jTextField3.getText();
       String terr_a = jTextField4.getText();

       int idterr_partenza = dbms.idTerritorio(terr_p);
       int idterr_arrivo = dbms.idTerritorio(terr_a);
       
       /* Prelevo le armate del territorio di partenza */
       int armateInTerrPartenza = dbms.armateInTerritorio(idp,idterr_partenza);

       /* Verifico che i due territori siano presenti e che le armate del territorio di partenza siano maggiore di 1 altrimenti non viene effettuato lo spostamento */
       if(idterr_partenza == 0 || idterr_arrivo == 0 || armateInTerrPartenza == 1 )
        {
           if(armateInTerrPartenza == 1)
            {
              JOptionPane.showMessageDialog(err,"Il territorio di partenza ha una sola armata. Non puoi effettuare lo spostamento!","Attenzione",JOptionPane.WARNING_MESSAGE);
            }
            else
            {
              JOptionPane.showMessageDialog(err,"Verificare che la corettezza del nome del territorio","Attenzione",JOptionPane.WARNING_MESSAGE);
            }
        }
        else
        {
           /* Verifico che il giocatore in corso sia lo stesso del territorio */
           int terrconfinante = 0;
           /* Prelevo l'id del giocatore che occupa il territorio di partenza*/
           int giocatore_occPartenza = dbms.giocatoreOccupante(idp, idterr_partenza);
           
           /* Prelevo l'id del giocatore in corso */
           String stringTmp = jTextField10.getText();
           int giocatore_inCorso = Integer.parseInt(stringTmp);
          
          /* Verifica che siano lo stesso giocatore */
          if(giocatore_occPartenza != giocatore_inCorso)
           {
             String nik = dbms.nicknameGiocatore(String.valueOf(giocatore_occPartenza),idp);
             JOptionPane.showMessageDialog(err,"Il territorio \""+ terr_p +"\" non è il tuo!\nAppartiene al giocatore: " + nik,"Attenzione",JOptionPane.WARNING_MESSAGE);     
             //JOptionPane.showMessageDialog(err,"Il territorio non è il tuo!","Attenzione",JOptionPane.WARNING_MESSAGE);
           }
           else
           {
             /* Dichiarazione variabli */  
             Connection conn = null;
             PreparedStatement rset = null;
                    
             try
             {
                /* Verifico se i due territori sono confinanti tra loro */
                conn = ConnessioneDB.getDefaultConnection();
                rset = conn.prepareStatement("SELECT ID_CONFINANTE FROM CONFINE WHERE ((ID_TERRITORIO = ?) AND (ID_CONFINANTE = ?))");
                rset.setInt(1,idterr_partenza);
                rset.setInt(2,idterr_arrivo);
                ResultSet checkconfine = rset.executeQuery();

                while(checkconfine.next())
                {
                  terrconfinante = checkconfine.getInt("ID_CONFINANTE");
                }
             }catch(SQLException e)
                {
                   catturaErrori(e);
                }finally
                  {
                      Query.conrsetClose(conn, rset);
                  }
               
               /* Se è uguale a zero allora i due territori non sono confinanti tra loro */
               if(terrconfinante == 0)
               {
                JOptionPane.showMessageDialog(err,"Il territorio "+ terr_p +" non confina con il territorio "+ terr_a +"!","Attenzione",JOptionPane.WARNING_MESSAGE);
               }
               else /* I territori confinano */
               {
                  /* Verifico che il giocatore in corso sposti le armate in un territorio di sua appartenenza */
                  int giocatore_occArrivo = dbms.giocatoreOccupante(idp, idterr_arrivo);

                  /* Se i giocatori non combaciano allora il territorio di arrivo non appartiene al giocatore */
                  if(giocatore_inCorso != giocatore_occArrivo)
                  {
                     JOptionPane.showMessageDialog(err,"Stai spostando delle armate in un territorio non tuo!","Attenzione",JOptionPane.WARNING_MESSAGE);
                  }
                  else /* Entrambi i territori appartengono al giocatore */
                  {  
                    /* Prendo il numero di armate da spostare */
                    String arm = jTextField5.getText();
                    int armate_da_spostare = Integer.parseInt(arm);
                    
                    /* Prendo le armate presenti nel territorio di partenza */
                    int armate_presenti = dbms.armateInTerritorio(idp,idterr_partenza);
                    
                    /*
                      Sottraggo alle armate presenti del territorio le armate che si vogliono spostare
                      menu una (in quando deve restare sempre almeno un'armata a presidiare).
                    */
                    armate_presenti = armate_presenti - 1;
                    
                    /* Se il numero di armate da spostare è maggiore di quelle che possono realmente essere spostate sollevo un errore */
                    if(armate_da_spostare > armate_presenti)
                     {
                        JOptionPane.showMessageDialog(err,"Stai spostando un numero di armate pari a "+ armate_da_spostare +" quando il limite massimo è di "+ armate_presenti +"!","Attenzione",JOptionPane.WARNING_MESSAGE);
                     }
                    else /* E' possibile spostare le armate */
                     {
                       /* Prendo i due nomi dei territori */
                       Insert ins = new Insert();
                       String terp = jTextField3.getText();
                       String tera = jTextField4.getText(); 
                       
                       /* Effettuo lo spostamento tra i territori */
                       ins.insertSpostamento(idp, idterr_partenza, idterr_arrivo, armate_da_spostare);
                       /* Avverto l'utente */
                       JOptionPane.showMessageDialog(err,"Ho spostato (" + armate_da_spostare +") armate da " + terp + " a " + tera + ". Il tuo turno e' concluso!" ,"Spostamento effettuato",JOptionPane.INFORMATION_MESSAGE);
                       /* Inserisco le informazioni nel file */
                       Insert.logFile("Il giocatore ha spostato " + armate_da_spostare + " armate dal territorio " + terp + " al territorio " + tera + ".");
                              
                       this.setVisible(false);
                       dispose(); 
                       java.awt.EventQueue.invokeLater(new Runnable() {
                       public void run() {
                       new Posizionamento().setVisible(true);
                            }
                         });
                                
                    }                     
                  }
                }
            }
        }

    }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
      // BOTTONE: Mostra confini nemici

     /* Dichiarazione variabili */
     Component err = null;

    /* Verifico che sia stato inserito un almeno un valore */
    if(jTextField3.getText().equals("") )
     {
        JOptionPane.showMessageDialog(err,"Non è stato inserito nessun nome territorio. Accertarsi di completare il campo.","Attenzione",JOptionPane.WARNING_MESSAGE);
     }
     else
     {
       /* Pulisco le aree per mostrare i territori nemici */
       jTextArea4.setText("");
       jTextArea3.setText("");
       /* Prendo il nome del territorio inserito dall'utente */
       String nome_terr = jTextField3.getText();

       Query dbms = new Query();
       /* Prendo l'id del territorio inserito */
       int id_terr = dbms.idTerritorio(nome_terr);

       /* Verifico che il territorio sia presente */
       if(id_terr == 0)
       {
         JOptionPane.showMessageDialog(err,"Territorio \""+ nome_terr +"\" non presente. Verificare la corettezza del nome!","Attenzione",JOptionPane.WARNING_MESSAGE);
       }
       else
            {
                /* Dichiarazione variabili */
                Connection conn = null;
                PreparedStatement rset = null;

                try
                {
                    /* Prendo l'id della partita e del giocatore */
                    String idp = jTextField2.getText();
                    String idg = jTextField10.getText();
                    /* Seleziona i territori confinanti */
                    conn = ConnessioneDB.getDefaultConnection();
                    rset = conn.prepareStatement("SELECT NOME_TERRITORIO, ID_TERRITORIO FROM TERRITORIO WHERE ID_TERRITORIO IN (SELECT ID_CONFINANTE FROM CONFINE WHERE ID_TERRITORIO = ?)");
                    rset.setInt(1,id_terr);
                    ResultSet conf = rset.executeQuery();

                    while(conf.next())
                    {
                        String nome_territorio = conf.getString("NOME_TERRITORIO");
                        int id_territorio = conf.getInt("ID_TERRITORIO");
                        /* Seleziona solo i territori che appartengono al giocatore */
                        conn = ConnessioneDB.getDefaultConnection();
                        rset = conn.prepareStatement("SELECT QUANTITA_TRUPPE FROM TERRITORIO_OCCUPATO WHERE ((ID_PARTITA = ?) AND (ID_TERRITORIO = ?) AND (GIOCATORE_OCCUPANTE = ?))");
                        rset.setString(1,idp);
                        rset.setInt(2,id_territorio);
                        rset.setString(3,idg);
                        ResultSet terr = rset.executeQuery();

                        while(terr.next())
                        {
                          //  String g_occ = terr.getString("GIOCATORE_OCCUPANTE");
                            String q_truppe = terr.getString("QUANTITA_TRUPPE");

                            jTextArea4.append(nome_territorio + "\n");
                            jTextArea3.append(q_truppe + "\n");
                        }
                    }
                }catch(SQLException e)
                {
                    catturaErrori(e);
                }finally
                {
                    Query.conrsetClose(conn, rset);
                }
            }
       
        String check = jTextArea4.getText();
       
       if(check.isEmpty())
       {
           jTextArea4.setText("Non hai territori\nconfinanti in cui\nspostare le armate!");
       }
       
       
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyTyped
        // KEY TYPED PER EVITARE DI INSERIRE CARATTERI NEL NUMERO DI ARMATE DA SPOSTARE
        
        /* Dichiarazione variabili */
        char vchar = evt.getKeyChar();

        if(!(Character.isDigit(vchar)) || (vchar == KeyEvent.VK_BACK_SPACE) || (vchar == KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
        /* imposto la lunghezza */
        if(jTextField5.getText().length()>= 2) evt.consume();   
    }//GEN-LAST:event_jTextField5KeyTyped

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // BOTTONE: NON EFFETTUARE SPOSTAMENTI
        
        /* Inserimento della fine dello spostamento nel file */
        Insert.logFile("");
        Insert.logFile("Spostamento terminato.");
        Insert.logFile("Turno concluso!");
        Insert.logFile("");
        Insert.logFile("");
        /* Turno finito, si riparte dalla fase di posizionamento */
        this.setVisible(false);
        dispose(); 
        java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
          new Posizionamento().setVisible(true);
       }
       });    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // APERTURA DEL FORM SPOSTAMENTO
     
        Query dbms = new Query();
        
        /* Prendo l'id della partita e lo setto */
        String id_p = dbms.idPartita(MenuNewPartita.salvaPartita.nomePartita);
        jTextField2.setText(id_p);
        
        /* Setto il nome della partita */
        jTextField14.setText(MenuNewPartita.salvaPartita.nomePartita);
        
        /* Prendo e setto l'id turno */
        String id_turno_max = dbms.maxIDTurno(id_p);
        jTextField12.setText(id_turno_max);
        
        /* Prendo e setto l'id del giocatore */
        String id_gamer = dbms.idGamer(id_p, id_turno_max);
        jTextField10.setText(id_gamer);   
        
        /* PRendo e setto il nik del giocatore */
        String nick = dbms.nicknameGiocatore(id_gamer,id_p);
        jTextField1.setText(nick);
        
        /* Dichiarazione variabili */
        Connection conn = null;
        PreparedStatement rset = null;
        
        /* Insrrisco nel file l'inizio della terza fase */
        Insert.logFile("");
        Insert.logFile("TERZA FASE: SPOSTAMENTO");
        /* Provvedo ad inserire le informazioni nel file */
        Insert.logFile("Tuno n° " + id_turno_max + ". Giocatore:" + nick);
      
        try
        {  
          /* Interrogazione per mostrare i territori e le relative armate del giocatore */
          conn = ConnessioneDB.getDefaultConnection();
          rset = conn.prepareStatement("SELECT ID_TERRITORIO, QUANTITA_TRUPPE FROM TERRITORIO_OCCUPATO WHERE ((GIOCATORE_OCCUPANTE = ?) AND (ID_PARTITA = ?))");
          rset.setString(1,id_gamer);
          rset.setString(2,id_p);
          ResultSet id_territorio_del_giocatore = rset.executeQuery();

          while(id_territorio_del_giocatore.next())
           {
              String id_territorio = id_territorio_del_giocatore.getString("ID_TERRITORIO");
              int quantita_truppe = id_territorio_del_giocatore.getInt("QUANTITA_TRUPPE");

              String nome_territorio = dbms.nomeTerritorio(id_territorio);

              jTextArea1.append(nome_territorio + "\n");
              jTextArea2.append(quantita_truppe + "\n");
           }
        }catch(SQLException e)
            {
              catturaErrori(e);
            }finally 
                   { 
                      Query.conrsetClose(conn, rset);
                   }         
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // CHIUSURA TRAMITE LA X
        
        /* Dichiarazione variabili */
        Component inf = null;
        
        /* Informo l'utente e scrivo nel file */
        JOptionPane.showMessageDialog(inf,"La partita è stata salvata.\nPuoi riprenderla quando vuoi usando Riprendi Partita nel menù principale!","Chiusura nella fase Spostamento",JOptionPane.INFORMATION_MESSAGE);
        Insert.logFile("");
        Insert.logFile("La partita è stata sospesa.");
        Insert.logFile("");
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // BOTTONE: ?
        
        /* Dichiarazione variabili */
        Component inf = null;
        JOptionPane.showMessageDialog(inf,"Si può decidere di spostare determinate armate da un territorio ad un altro. Inserito il nome del territorio in \"Nome territorio di partenza\" si può cliccare su\n\"Mostra confini\" per ottenere"
                + "la lista, se presente, dei territori confinianti dove è possibile spostare le armate. Inserito il territorio di arrivo e specificate\nle armate da spostare cliccado su \"Sposta armate\" verrà effettuato lo spostamento."
                + "\n\n<html><b>E' possibile non effettuare nessuno spostamento cliccando su \"Non effettuare nessuno spostamento\".</b></html>","?",JOptionPane.INFORMATION_MESSAGE);     
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
       // KEY TYPED PER L'INSERIMENTO CORRETTO DEL NOME DEL TERRITORIO DA CUI SPOSTARE LE ARMATE
        
       /* Prendo il carattere digitato */
       char c = evt.getKeyChar();
       /* Verifico che sia accettabile */
       int i = verificaTerritorio(c);
       /* Carattere non consono lo scarto */
       if(i != 1) evt.consume();
       /* Imposto lunghezza massima di 30 caratteri */
       if(jTextField3.getText().length()>= 30) evt.consume();      
    }//GEN-LAST:event_jTextField3KeyTyped

    private void jTextField4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyTyped
       // KEY TYPED PER L'INSERIMENTO CORRETTO DEL NOME DEL TERRITORIO DA CUI FAR ARRIVARE LE ARMATE
        
       /* Prendo il carattere digitato */
       char c = evt.getKeyChar();
       /* Verifico che sia accettabile */
       int i = verificaTerritorio(c);
       /* Carattere non consono lo scarto */
       if(i != 1) evt.consume();
       /* Imposto lunghezza massima di 30 caratteri */
       if(jTextField4.getText().length()>= 30) evt.consume();   
    }//GEN-LAST:event_jTextField4KeyTyped

    private void jTextField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyPressed
        // KEY PRESSED PER IL TERRITORIO DI PARTENZA
        
        /* Elimino la possibilità di usare incolla */
        jTextField3.setTransferHandler(null);
    }//GEN-LAST:event_jTextField3KeyPressed

    private void jTextField4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyPressed
        // KEY PRESSED PER IL TERRITORIO DI ARRIVO
        
        /* Elimino la possibilità di usare incolla */
        jTextField4.setTransferHandler(null);
    }//GEN-LAST:event_jTextField4KeyPressed

    private void jTextField5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyPressed
        // KEY PRESSED PER IL NUMERO DI ARMATE DA SPOSTARE
        
        /* Elimino la possibilità di usare incolla */
        jTextField5.setTransferHandler(null);
    }//GEN-LAST:event_jTextField5KeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Spostamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Spostamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Spostamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Spostamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Spostamento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
