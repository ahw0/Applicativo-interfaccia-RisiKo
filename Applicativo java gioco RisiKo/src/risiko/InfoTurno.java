/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package risiko;

import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import static risiko.MenuNewPartita.verificaCarattere;
import static risiko.Query.catturaErrori;

/**
 *
 * @author ikaros
 */
/*
    DESCRIZIONE GENERALE

    Classe adibita alla rappresentazione delle dovute informazioni in base alla dell'utente delle
    partita e di un turno.
    Tutte le informazioni vengono prelevate dal database in base a tutte le azioni svolte in un turno.

    Tra le informazioni sono presenti:
    
    Informazioni sulla fase Posizionamento:
    - N° turno: numero del turno che si sta analizzando
    - Giocatore: il nickname del giocatore del turno scelto
    - N° posizionamenti effettuati: numero di posizionamenti totale che ha fatto il giocatore in quel turno
    - Somma delle truppe inserite: numero totale delle armate che ha inserito
    - Altre informazioni: riguarda il nome dei territori dove sono state inserite le armate

    Informazioni sulla fase Combattimento:
    - N° combattimenti effettuati: numero di combattimenti totale che ha fatto il giocatore in quel turno
    - Altre informazioni: vengono mostrati i relativi combattimenti (territorio attaccante e attaccato) con i relativi
      lancio dei dadi. Alla fine viene mostrato anche se il territorio è stato conquistato o meno.
      
    Informazioni sulla fase Spostamento:
    - N° spostamenti effettuati: numero di spostamenti totale che ha fatto il giocatore in quel turno. Il valore
      per le regole del gioco varia tra 0 (nessuno spostamento) a 1 (spostamento effettuato)
    - Altre informazioni: viene mostrato il territorio di partenza, il numero di armate spostate e il territorio di arrivo.

*/
public class InfoTurno extends javax.swing.JFrame {

    /**
     * Creates new form InfoTurno
     */
    public InfoTurno() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Informazioni su: Turno");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton2.setText("Mostra info");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Inserisci il nome della partita");

        jTextField1.setText("nome partita..");
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Partite presenti");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Passo 1");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Passo 2");
        jLabel4.setEnabled(false);

        jScrollPane2.setEnabled(false);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton3.setText("Cambia partita");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Indietro");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel5.setText("Inserisci il numero del turno");
        jLabel5.setEnabled(false);

        jTextField2.setText("numero turno...");
        jTextField2.setEnabled(false);
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField2KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Turni presenti");
        jLabel6.setEnabled(false);

        jButton1.setText("Mostra i turni");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Prima fase: Posizionamento");
        jLabel7.setEnabled(false);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Info sul turno");
        jLabel8.setEnabled(false);

        jLabel10.setText("N° Turno");
        jLabel10.setEnabled(false);

        jTextField3.setEditable(false);
        jTextField3.setEnabled(false);

        jLabel11.setText("Giocatore");
        jLabel11.setEnabled(false);

        jTextField4.setEditable(false);
        jTextField4.setEnabled(false);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Fasi svolte nel turno");
        jLabel12.setEnabled(false);

        jLabel13.setText("N° di posizionamenti effettuati");
        jLabel13.setEnabled(false);

        jTextField5.setEditable(false);
        jTextField5.setEnabled(false);

        jScrollPane3.setEnabled(false);

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jLabel14.setText("Altre informazioni");
        jLabel14.setEnabled(false);

        jLabel15.setText("Somma delle truppe inserite");
        jLabel15.setEnabled(false);

        jTextField6.setEditable(false);
        jTextField6.setEnabled(false);

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setText("Seconda fase: Combattimento");
        jLabel16.setEnabled(false);

        jLabel17.setText("N° di combattimenti effettuati");
        jLabel17.setEnabled(false);

        jTextField7.setEditable(false);
        jTextField7.setEnabled(false);

        jScrollPane4.setEnabled(false);

        jTextArea4.setEditable(false);
        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        jLabel18.setText("Altre informazioni");
        jLabel18.setEnabled(false);

        jLabel19.setText("N° di spostamenti effettuati");
        jLabel19.setEnabled(false);

        jTextField8.setEditable(false);
        jTextField8.setEnabled(false);

        jScrollPane5.setEnabled(false);

        jTextArea5.setEditable(false);
        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jScrollPane5.setViewportView(jTextArea5);

        jLabel20.setText("Altre informazioni");
        jLabel20.setEnabled(false);

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel21.setText("Seconda fase: Spostamento");
        jLabel21.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane2)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(7, 7, 7)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel14)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel18)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel20)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel8))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1)
                        .addGap(12, 12, 12)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(12, 12, 12)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel10)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel9))
                        .addGap(29, 29, 29)
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // BOTTONE: MOSTRA INFO

        /* Dichiarazione variabili */
        Component err = null;
        Connection conn = null;
        PreparedStatement rset = null;
        Query dbms = new Query();
        int idg = 0;
        int idt = 0;
        String idp = null;
        
        String check = jTextField2.getText();
        
        if(check.equals("numero turno...")) idg = 0;
        else
        {    
            /* Prendo il valore del turno inserito dal giocatore */
             idt = Integer.parseInt(jTextField2.getText());
            /* Prendo l'id della partita */
             idp = dbms.idPartita(jTextField1.getText());
            /* Prendo l'id del giocatore del turno preso */
             idg = dbms.InfoIDTurno(idp,idt);
        }
        
        /* Se il turno è corretto esiste un giocatore.
           Il turno 0 è usato dal database per svolgere attivita
           quali assegnazione carte, obiettivi, territorio ecc..
           Questo implica che non ci sono informazioni da dover visualizzare
           al turno 0.
        */
        if(idg != 0 && idt != 0)
        {
          /* Adatto i parametri per la coretta visualizzazione */
          jTextArea3.setEnabled(true);
          jTextArea4.setEnabled(true);
          jTextArea5.setEnabled(true);
          jTextField3.setEnabled(true);
          jTextField4.setEnabled(true);
          jTextField5.setEnabled(true);
          jTextField6.setEnabled(true);
          jTextField7.setEnabled(true);
          jTextField8.setEnabled(true);
          jLabel7.setEnabled(true);
          jLabel8.setEnabled(true);
          jLabel10.setEnabled(true);
          jLabel11.setEnabled(true);
          jLabel12.setEnabled(true);
          jLabel13.setEnabled(true);
          jLabel14.setEnabled(true);
          jLabel15.setEnabled(true);
          jLabel16.setEnabled(true);
          jLabel17.setEnabled(true);
          jLabel18.setEnabled(true);
          jLabel19.setEnabled(true);
          jLabel20.setEnabled(true);
          jLabel21.setEnabled(true);
          jTextArea3.setText("");
          jTextArea4.setText("");
          jTextArea5.setText("");
            
          /* Mostro il numero di turno */
          jTextField3.setText(jTextField2.getText());
          /* Ottengo e setto il nickname del giocatore */
          String nik = dbms.nicknameGiocatore(String.valueOf(idg),idp);
          jTextField4.setText(nik);
            
          /* Dichiarazione variabili */
          int tot = 0;
          int rinf = 0;
            
          /* Query da effettuare */
          String query = "SELECT COUNT(*) AS TOT, SUM(RINFORZI_TRUPPE) AS RINF FROM POSIZIONAMENTO_ARMATA WHERE ((ID_PARTITA = ?) AND (ID_TURNO = ?))";
            
          try
           {
              /* Si sommano tutte le truppe inserite e si contano i posizionamenti fatti dal giocatore nel turno specificato */
              conn = ConnessioneDB.getDefaultConnection();
              rset = conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
              rset.setString(1,idp);
              rset.setInt(2,idt);
              ResultSet risul = rset.executeQuery();

              while(risul.next())
              {
                 tot = risul.getInt("TOT");
                 rinf = risul.getInt("RINF");        
              }
           }catch(SQLException e)
            {
              catturaErrori(e);
            }finally 
                   { 
                      Query.conrsetClose(conn, rset);
                   }
          /* Setto i risultati della query */
          jTextField5.setText(String.valueOf(tot));      
          jTextField6.setText(String.valueOf(rinf));
          
          /* Se è diverso da zero allora il giocatore ha effettuato almeno un posizionamento */
          if(tot != 0)
          {
            /* Dichiarazione variabili */
            int tipop = 0;
            int idterr = 0;
          
            /* Query da effettuare */
            query = "SELECT ID_POSIZIONAMENTO, RINFORZI_TRUPPE, TIPO_POSIZIONAMENTO, ID_TERRITORIO_POS FROM POSIZIONAMENTO_ARMATA WHERE ((ID_PARTITA = ?) AND (ID_TURNO = ?))";

            try
             {
                /* Vengono prese tutte le informazioni che servono per il posizionamento */
                conn = ConnessioneDB.getDefaultConnection();
                rset = conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                rset.setString(1,idp);
                rset.setInt(2,idt);
                ResultSet risul = rset.executeQuery();

                while(risul.next())
                {
                   tot = risul.getInt("ID_POSIZIONAMENTO");
                   rinf = risul.getInt("RINFORZI_TRUPPE"); 
                   tipop = risul.getInt("TIPO_POSIZIONAMENTO");
                   idterr = risul.getInt("ID_TERRITORIO_POS");
                   String nomet = dbms.nomeTerritorio(String.valueOf(idterr));

                   /* Informo l'utente */
                   jTextArea3.append("Nel posizionamento n° (" + tot +") sono state inserite (" + rinf +") armate nel territorio: "+ nomet + ".\n");
                   
                   /* In base al tipo posizionamento si ha: 0-> posizionamento preliminare, 1-> posizionamento classico e N>1 -> posizionamento con combinazione carte */
                   if(tipop == 0)
                   {
                        jTextArea3.append("Tali armate sono state inserite durante la fase preliminare.\n - \n");
                   }
                   else
                   {
                       if(tipop == 1)
                       {
                          jTextArea3.append("Tali armate sono state inserite durante il turno classico di gioco.\n - \n"); 
                       }
                       else
                       {
                         jTextArea3.append("L'inserimento di tali armate è stato fatto sfruttando una combinazione di carte.\n - \n"); 
                       }
                   }

                }
             }catch(SQLException e)
              {
                catturaErrori(e);
              }finally 
                     { 
                        Query.conrsetClose(conn, rset);
                     }
             jTextArea3.append("Fine degli inserimenti!");
          }
          else /* Il giocatore non ha compiuto posizionamenti */
          {
              jTextArea3.append("Non sono stati effettuati posizionamenti in questo turno!");
          }
           
           /* Ottengo il numero di combattimenti e li setto */
           int ncomb = dbms.InfoCombTurno(idp,idt);
           jTextField7.setText(String.valueOf(ncomb));
           
           /* Se diverso da zero allora il giocatore ha effettuato almeno un combattimento */
           if(ncomb != 0)
           {
                /* Dichiarazione variabili */
                int terrAtt = 0;    int dado1_att = 0;  int dado1_dif = 0;
                int terrDif = 0;    int dado2_att = 0;  int dado2_dif = 0;
                int conq = 0;       int dado3_att = 0;  int dado3_dif = 0;
                int n_lancio = 0;   int idcomb = 0;
                
                /* Query da effettuare */
                query = "SELECT ID_TERRITORIO_ATTACCANTE, ID_TERRITORIO_ATTACCATO, VINCENTE, ID_COMB FROM COMBATTIMENTO WHERE ((ID_TURNO = ?) AND (ID_PARTITA = ?))";

                try
                {
                  /* Prendo le informazioni riguardanti l'attacco sferrato dal giocatore */
                  conn = ConnessioneDB.getDefaultConnection();
                  rset = conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                  rset.setInt(1,idt);
                  rset.setString(2,idp);
                  ResultSet terr = rset.executeQuery();

                  while(terr.next())
                  {
                    terrAtt = terr.getInt("ID_TERRITORIO_ATTACCANTE");
                    terrDif = terr.getInt("ID_TERRITORIO_ATTACCATO");
                    conq = terr.getInt("VINCENTE");
                    idcomb = terr.getInt("ID_COMB");
                    /* Ottengo i nomi dei territori */
                    String terA = dbms.nomeTerritorio(String.valueOf(terrAtt));
                    String terD = dbms.nomeTerritorio(String.valueOf(terrDif));
                    /* Notifico l'utente */
                    jTextArea4.append("E' stato sferrato un'attacco dal territorio: " + terA + " al territorio: " + terD + ".\n");
                    
                    /* Query da effettuare */
                    query = "SELECT N_LANCIO, DADO1_ATT, DADO2_ATT, DADO3_ATT, DADO1_DIFF, DADO2_DIFF, DADO3_DIFF FROM LANCIO_DADI WHERE ((ID_TURNO = ?) AND (ID_PARTITA = ?) AND (ID_COMB = ?))";
                   
                    try
                    {
                      /* Per ogni combattimento prendo il valore o i valori dei dadi lanciati.
                         Si ricorda infatti che un utente può scegliere un territorio da attaccare
                         e successivamente lanciare quante volte vuole i dadi.
                      */
                      conn = ConnessioneDB.getDefaultConnection();
                      rset = conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                      rset.setInt(1,idt);
                      rset.setString(2,idp);
                      rset.setInt(3,idcomb);
                      ResultSet dadi = rset.executeQuery();
                      
                      while(dadi.next())
                      {
                          n_lancio = dadi.getInt("N_LANCIO");
                          dado1_att = dadi.getInt("DADO1_ATT");
                          dado2_att = dadi.getInt("DADO2_ATT");
                          dado3_att = dadi.getInt("DADO3_ATT");
                          dado1_dif = dadi.getInt("DADO1_DIFF");
                          dado2_dif = dadi.getInt("DADO2_DIFF");
                          dado3_dif = dadi.getInt("DADO3_DIFF");
                          /* Notifico l'utente */
                          jTextArea4.append("Lancio di dadi n°("+ n_lancio +"), sotto riportati.\nAttaccante -> Dado 1: (" + dado1_att +") - Dado 2: ("+ dado2_att +") - Dado 3: ("+ dado3_att +").\n");
                          jTextArea4.append("Difensore -> Dado 1: (" + dado1_dif +") - Dado 2: ("+ dado2_dif +") - Dado 3: ("+ dado3_dif +").\n\n");
                      }      
                    }catch(SQLException e)
                      {
                        catturaErrori(e);
                      }
                    
                    /* Verifico che il territorio sia stato conquistato o meno */
                    if(conq == 1)
                    {
                      jTextArea4.append("L'attacco ha portato alla conquista del territorio!\n-\n");
                    }
                    else
                    {
                      jTextArea4.append("Purtroppo l'attacco non ha portato alla conquista del territorio!\n-\n");  
                    }
                    
                  } 


                 }catch(SQLException e)
                      {
                        catturaErrori(e);
                      }finally 
                             { 
                                Query.conrsetClose(conn, rset);
                             }
               
               jTextArea4.append("Fine combattimenti!");
               
               /* Ottengo gli spostamenti effettuati dal giocatore */
               int spost = dbms.InfoSpostTurno(idp,idt);
               jTextField8.setText(String.valueOf(spost));
               
               /* Se diverso da zero allora il giocatore ha fatto uno spostamento */
               if(spost != 0)
               {
                   /* Dichiarazione variabili */
                   int n_truppe = 0; String terP = null; String terA = null;
                   
                   /* Query da effettuare */
                   query = "SELECT ID_TERRITORIO_PARTENZA, ID_TERRITORIO_ARRIVO, TRUPPE_SPOSTATE FROM SPOSTAMENTO WHERE ((ID_TURNO = ?) AND (ID_PARTITA = ?))";
                   
                   try
                    {
                      /* Prendo le informazioni sui territori e la quantità di truppe spostate */
                      conn = ConnessioneDB.getDefaultConnection();
                      rset = conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                      rset.setInt(1,idt);
                      rset.setString(2,idp);
                      ResultSet sp = rset.executeQuery();
                   
                      while(sp.next())
                      {
                        terrAtt = sp.getInt("ID_TERRITORIO_PARTENZA");
                        terrDif = sp.getInt("ID_TERRITORIO_ARRIVO");
                        n_truppe = sp.getInt("TRUPPE_SPOSTATE");
                        /* Ottengo i nomi dei territori */ 
                        terP = dbms.nomeTerritorio(String.valueOf(terrAtt));
                        terA = dbms.nomeTerritorio(String.valueOf(terrDif));
                      }
                      /* Informo l'utente */
                      jTextArea5.append("Sono state spostate (" + n_truppe +") truppe dal territorio "+ terP + " al territorio " + terA + ".");
                      
                    }catch(SQLException e)
                      {
                        catturaErrori(e);
                      }
                   
                   jTextArea5.append("\nFine degli spostamenti!");         
               }    
               else /* L'utente non ha fatto spostamenti */
               {
                  jTextArea5.append("Non sono stati effettuati spostamenti in questo turno!"); 
               }       
           }
           else /* L'utente non ha effettuato combattimenti */
           {
             jTextArea4.append("Non sono stati effettuati combattimenti in questo turno!");
           }        
        }
        else /* Il turno scleto non esiste */
        {
          JOptionPane.showMessageDialog(err,"Il turno n°: " + jTextField2.getText() + " non esiste!" ,"Attenzione",JOptionPane.WARNING_MESSAGE);    
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // BOTTONE: CAMBIA PARTITA

        /* Adatto i componenti */
        jButton1.setEnabled(true);
        jButton2.setEnabled(false);
        jTextField1.setEnabled(true);
        jLabel1.setEnabled(true);
        jTextArea1.setEnabled(true);
        jTextArea3.setEnabled(false);
        jTextArea4.setEnabled(false);
        jTextArea5.setEnabled(false);
        jTextField3.setEnabled(false);
        jTextField4.setEnabled(false);
        jTextField5.setEnabled(false);
        jTextField6.setEnabled(false);
        jTextField7.setEnabled(false);
        jTextField8.setEnabled(false);
        jLabel7.setEnabled(false);
        jLabel8.setEnabled(false);
        jLabel10.setEnabled(false);
        jLabel11.setEnabled(false);
        jLabel12.setEnabled(false);
        jLabel13.setEnabled(false);
        jLabel14.setEnabled(false);
        jLabel15.setEnabled(false);
        jLabel16.setEnabled(false);
        jLabel17.setEnabled(false);
        jLabel18.setEnabled(false);
        jLabel19.setEnabled(false);
        jLabel20.setEnabled(false);
        jLabel21.setEnabled(false);
      
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // BOTTONE: INDIETRO

        this.setVisible(false);
        dispose();
        new Info().setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // BOTTONE: MOSTRA I TURNI

        /* Dichiarazione variabili */
        Component err = null;
        Connection conn = null;
        PreparedStatement rset = null;
        String giocatore = null;
        int turno = 0;
        Query dbms = new Query();
        jTextArea2.setText("");
        
        /* Prelevo l'id partita scritta dall'utente */
        String idp = dbms.idPartita(jTextField1.getText());
        
        /* La partita esiste */
        if(idp!= null)
        {
           /* Query da effettuare */
           String query = "SELECT T.ID_TURNO, G.NICKNAME FROM TURNO T JOIN GIOCATORE G ON ((T.ID_PARTITA = G.ID_PARTITA) AND (T.ID_GAMER = G.ID_GAMER)) WHERE ((T.ID_PARTITA = ?) AND (T.ID_TURNO <> 0)) ORDER BY T.ID_TURNO ASC";
            
          try
           {
              /* Mostro tutti i turni con i relativi giocatori */
              conn = ConnessioneDB.getDefaultConnection();
              rset = conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
              rset.setString(1,idp);
              ResultSet giocatori = rset.executeQuery();

              while(giocatori.next())
              {
                 turno = giocatori.getInt("ID_TURNO");
                 giocatore = giocatori.getString("NICKNAME");
                 jTextArea2.append("Turno N°:" + turno + " - Giocatore: " + giocatore + "\n");        
              }
           }catch(SQLException e)
            {
              catturaErrori(e);
            }finally 
                   { 
                      Query.conrsetClose(conn, rset);
                   }
            
            /* Adatto i componenti */
            jLabel4.setEnabled(true);
            jLabel5.setEnabled(true);
            jLabel6.setEnabled(true);
            jTextArea2.setEnabled(true);
            jTextField2.setEnabled(true);
            jButton2.setEnabled(true);
            jButton3.setEnabled(true);
            jButton1.setEnabled(false);
            jTextField1.setEnabled(false);      
        }
        else /* Partita non esistente */
        {
            JOptionPane.showMessageDialog(err,"La partita " + jTextField1.getText() + " non esiste!" ,"Attenzione",JOptionPane.WARNING_MESSAGE); 
        }
        

    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // APERTURA FORM: INFO TURNO
        
         /* Dichiarazione variabili */
        Connection conn = null;
        PreparedStatement rset = null;
        String partita = null;
        
        /* Query da effettuare */
        String query = "SELECT NOME_PARTITA FROM PARTITA";
        
      try
         {
            conn = ConnessioneDB.getDefaultConnection();
            rset = conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            ResultSet respartita = rset.executeQuery();
            
            /* Prelevo e mostro ogni partita */
            while(respartita.next())
            {
               partita = respartita.getString("NOME_PARTITA");
               jTextArea1.append(partita + "\n");        
            }
           
         }catch(SQLException e)
            {
              catturaErrori(e);
            }finally 
                   { 
                      Query.conrsetClose(conn, rset);
                   }       
    }//GEN-LAST:event_formWindowOpened

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
       //KEY TYPED PER EVITARE L'INSERIMENTO DI CARATTERI NEL TURNO
     
       /* Dichiarazione variabili */
       char vchar = evt.getKeyChar();  
        
       if(!(Character.isDigit(vchar)) || (vchar == KeyEvent.VK_BACK_SPACE) || (vchar == KeyEvent.VK_DELETE))
        {
           evt.consume();
        }  
       
        if(jTextField2.getText().length()>= 9) evt.consume();
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
       // KEY TYPED PER LA VERIFICA DEL NOME DELLA PARTITA
     
       /* Prendo il carattere digitato */
       char c = evt.getKeyChar();
       /* Verifico che sia accettabile */
       int i = verificaCarattere(c);
       /* Carattere non consono lo scarto */
       if(i != 1) evt.consume();
       /* Imposto lunghezza massima di 20 caratteri */
       if(jTextField1.getText().length()>= 20) evt.consume(); 
        
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        // KEY PRESSED PER IL NOME DELLA PARTITA
        
        /* Elimino la possibilità di usare incolla */
        jTextField1.setTransferHandler(null);
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyPressed
         // KEY PRESSED PER IL TURNO
        
        /* Elimino la possibilità di usare incolla */
        jTextField2.setTransferHandler(null);
    }//GEN-LAST:event_jTextField2KeyPressed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables
}
