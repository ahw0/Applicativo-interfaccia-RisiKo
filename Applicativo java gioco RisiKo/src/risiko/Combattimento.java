/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package risiko;

import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import static risiko.Query.catturaErrori;

/**
 *
 * @author ikaros
 */

/* 
    DESCRIZIONE GENERALE

Classe adibita alla gestione della seconda fase del gioco; combattimento.
All'apertuta del form vengono visualizzate tutte le informazioni di cui necessita 
il giocatore per poter iniziare a prepararsi per un attacco. 
Una scelto il territorio da cui far partite l'attacco il pulsante "Mostra confini nemici" permette
in maniera semplice di ottenere la lista dei territori a cui può sferrare un attacco. 
Una volta inserito il territorio da attaccare cliccando su prepara l'attacco si passa alla "seconda"
fase del combattimento, il lancio dei dadi. 
Scelti il numero e il valore dei dadi, cliccando su attacca si procede ad interrogare il dbms per 
ottenere l'esito dello scontro con l'eventuale incremento/decremento/conquista del territorio.
Conquistato un territorio vi è la possibilità di poter spostare tutte le armate eccetto una, oppure,
in automatico verranno spostante N armate quante il numero dei dadi lanciati.
Il giocatore può sferrare anche più attacchi allo stesso territorio continuando a premere il bottone
"Attacca" fino alla conquista o all'esaurimento delle armate (resta una sola armata a presidiare il territorio).
E' possibile in questa fase anche non effettuare nessun combattimento selezionando il bottone "Non effettuare
nessun combattimento".

*/
public class Combattimento extends javax.swing.JFrame {

    /**
     * Creates new form Combattimento
     */
    public Combattimento() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel12 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fase 2: Combattimento");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel12.setText("N° turno");

        jTextField12.setEditable(false);

        jLabel3.setText("Partita N°");

        jTextField2.setEditable(false);

        jLabel1.setText("Attaccante");

        jTextField1.setEditable(false);

        jLabel9.setText("Il tuo ID");

        jTextField10.setEditable(false);

        jLabel2.setText("I tuoi territori");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel8.setText("Carri sul territorio");

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jLabel10.setText("Carri sul territorio");

        jLabel4.setText("Territori nemici confinanti");

        jTextArea4.setEditable(false);
        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        jLabel5.setText("Nome territorio attaccante");

        jTextField3.setText("inserisci");
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField3KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });

        jLabel6.setText("Nome territorio attaccato");

        jTextField4.setText("inserisci");
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField4KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField4KeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("1: Fase Combattimento");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("2: Fase Lancio dadi");

        jButton1.setText("Prepara all'attacco");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField6.setText("valore dado 2");
        jTextField6.setEnabled(false);
        jTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField6KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField6KeyTyped(evt);
            }
        });

        jTextField7.setText("valore dado 3");
        jTextField7.setEnabled(false);
        jTextField7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField7KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField7KeyTyped(evt);
            }
        });

        jTextField8.setText("valore dado 1");
        jTextField8.setEnabled(false);
        jTextField8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField8KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField8KeyTyped(evt);
            }
        });

        jTextField9.setText("valore dado 2");
        jTextField9.setEnabled(false);
        jTextField9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField9KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField9KeyTyped(evt);
            }
        });

        jTextField11.setText("valore dado 3");
        jTextField11.setEnabled(false);
        jTextField11.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField11KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField11KeyTyped(evt);
            }
        });

        jTextField13.setText("valore dado 1");
        jTextField13.setEnabled(false);
        jTextField13.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField13KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField13KeyTyped(evt);
            }
        });

        jLabel14.setText("Attaccante");

        jLabel15.setText("Difensore");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleziona numero armate", "1 Armata", "2 Armate", "3 Armate" }));
        jComboBox1.setEnabled(false);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleziona numero armate", "1 Armata", "2 Armate", "3 Armate" }));
        jComboBox2.setEnabled(false);
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jButton2.setText("Attacca");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel11.setText("ID difensore");

        jTextField5.setEditable(false);

        jButton3.setText("Mostra confini nemici");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel16.setText("Nome partita");

        jTextField14.setEditable(false);

        jTextArea5.setEditable(false);
        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jScrollPane5.setViewportView(jTextArea5);

        jLabel18.setText("Colore");

        jButton4.setText("Finisci i combattimenti");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Cambia territorio da attaccare");
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Sposta tutte le armate");
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel17.setText("Nickname difensore");

        jTextField15.setEditable(false);

        jButton7.setText("?");
        jButton7.setToolTipText("help");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField10))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel3))
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel13))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(106, 106, 106))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(39, 39, 39)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(83, 83, 83)
                                        .addComponent(jLabel6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton3)
                                            .addComponent(jLabel14)
                                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(64, 64, 64)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel15)
                                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(37, 37, 37)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18)))
                    .addComponent(jLabel17)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel12))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addGap(37, 37, 37))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel16)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel7)
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton3)
                                    .addComponent(jButton1))
                                .addGap(55, 55, 55)
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 25, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)
                                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)
                                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)
                                .addGap(4, 4, 4)
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6)
                                .addGap(5, 5, 5))
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField5, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                            .addComponent(jButton7)
                            .addComponent(jTextField15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(8, 8, 8)
                .addComponent(jButton4)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // APERTURA DEL FORM COMBATTIMENTO
        
        /* Dichiarazione variabili */
        Query dbms = new Query();
        
        /* Prelevo l'id della partita e lo setto */
        String id_p = dbms.idPartita(MenuNewPartita.salvaPartita.nomePartita);
        jTextField2.setText(id_p);
        /* Setto il nome della partita */
        jTextField14.setText(MenuNewPartita.salvaPartita.nomePartita);
        
        /* Prelevo e setto il turno massimo */
        String id_turno_max = dbms.maxIDTurno(id_p);
        jTextField12.setText(id_turno_max);
        
        /* Prleevo e setto l'id del giocatore a cui tocca */
        String id_gamer = dbms.idGamer(id_p, id_turno_max);
        jTextField10.setText(id_gamer);   
        
        /* Prelevo e setto il nik del giocatore */
        String nick = dbms.nicknameGiocatore(id_gamer,id_p);
        jTextField1.setText(nick);
        
        /* Dichiarazine variabili */
        Connection conn = null;
        PreparedStatement rset = null;
        
        /* Provvedo ad inserire le informazioni nel file */
        Insert.logFile("");
        Insert.logFile("SECONDA FASE: COMBATTIMENTO");
        Insert.logFile("Tuno n° " + id_turno_max + ". Giocatore:" + nick);
        
        try
        {              
          /* Interrogaione per mostrare i territori e il numero di armate del giocatore */
          conn = ConnessioneDB.getDefaultConnection();
          rset = conn.prepareStatement("SELECT ID_TERRITORIO, QUANTITA_TRUPPE FROM TERRITORIO_OCCUPATO WHERE ((GIOCATORE_OCCUPANTE = ?) AND (ID_PARTITA = ?))");
          rset.setString(1,id_gamer);
          rset.setString(2,id_p);
          ResultSet id_territorio_del_giocatore = rset.executeQuery();

          while(id_territorio_del_giocatore.next())
           {
              String id_territorio = id_territorio_del_giocatore.getString("ID_TERRITORIO");
              int quantita_truppe = id_territorio_del_giocatore.getInt("QUANTITA_TRUPPE");

              String nome_territorio = dbms.nomeTerritorio(id_territorio);

              jTextArea1.append(nome_territorio + "\n");
              jTextArea2.append(quantita_truppe + "\n");
           }       
        }catch(SQLException e)
            {
              catturaErrori(e);
            }finally 
                   { 
                      Query.conrsetClose(conn, rset);
                   }     
    }//GEN-LAST:event_formWindowOpened

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
     // BOTTONE: MOSTRA CONFINI NEMICI
    
    /* Dichiarazione variabili */
    Component err = null;
    
    /* Verifico che sia stato inserito un valore */
    if(jTextField3.getText().equals("") )
    {
      JOptionPane.showMessageDialog(err,"Non è stato inserito nessun nome territorio. Accertarsi di completare il campo.","Attenzione",JOptionPane.WARNING_MESSAGE);
    }
    else
    {
       /* Pulisco le aree per inserrire eventuali valori */
       jTextArea4.setText("");  
       jTextArea3.setText("");  
       jTextArea5.setText("");  
       /* Prendo il valore inserito dal giocatore */
       String nome_terr = jTextField3.getText();
        
       Query dbms = new Query();
       /* Ottendo l'id del valore inserito */
       int id_terr = dbms.idTerritorio(nome_terr);
       
       /* Verifico che il territorio inserto sia esistente */
       if(id_terr == 0)
       {
          JOptionPane.showMessageDialog(err,"Territorio \""+ nome_terr +"\" non presente. Verificare la corettezza del nome!","Attenzione",JOptionPane.WARNING_MESSAGE);
       }
       else
       {
           /* Dichiarazione variabili  */
           Connection conn = null;
           PreparedStatement rset = null;
            
           try
           {       
             /* Interrogazione per selezionare i territori confinanti dal territorio inserito */
             String colore = null;
             String idp = jTextField2.getText();
             String idg = jTextField10.getText();
             conn = ConnessioneDB.getDefaultConnection();
             rset = conn.prepareStatement("SELECT NOME_TERRITORIO, ID_TERRITORIO FROM TERRITORIO WHERE ID_TERRITORIO IN (SELECT ID_CONFINANTE FROM CONFINE WHERE ID_TERRITORIO = ?)");
             rset.setInt(1,id_terr);
             ResultSet conf = rset.executeQuery();
                   
             while(conf.next())
             {
                
                String nome_territorio = conf.getString("NOME_TERRITORIO");
                int id_territorio = conf.getInt("ID_TERRITORIO");
                /* Interrogazione per prelevare solo i territori che non appartengono al giocatore stesso */
                conn = ConnessioneDB.getDefaultConnection();
                rset = conn.prepareStatement("SELECT GIOCATORE_OCCUPANTE, QUANTITA_TRUPPE FROM TERRITORIO_OCCUPATO WHERE ((ID_PARTITA = ?) AND (ID_TERRITORIO = ?) AND (GIOCATORE_OCCUPANTE <> ?))");
                rset.setString(1,idp);
                rset.setInt(2,id_territorio);
                rset.setString(3,idg);
                ResultSet terr = rset.executeQuery();
                        
                while(terr.next())
                {
                   String g_occ = terr.getString("GIOCATORE_OCCUPANTE");
                   String q_truppe = terr.getString("QUANTITA_TRUPPE");
                   /* Interrogazione per selezionare il colore dei giocatori nemici */        
                   conn = ConnessioneDB.getDefaultConnection();
                   rset = conn.prepareStatement("SELECT COLORE FROM GIOCATORE WHERE ((ID_PARTITA = ?) AND (ID_GAMER = ?))");
                   rset.setString(1,idp);
                   rset.setString(2,g_occ);
                   ResultSet color = rset.executeQuery();
                             
                    while(color.next())
                    {
                        colore = color.getString("COLORE");    
                    }
                    
                    jTextArea4.append(nome_territorio + "\n");  
                    jTextArea3.append(q_truppe + "\n");   
                    jTextArea5.append(colore + "\n"); 
                }             
             }
               }catch(SQLException e)
                {
                    catturaErrori(e);
                }finally 
                    { 
                      Query.conrsetClose(conn, rset);
                    }        
        }    
       
       
       String check = jTextArea4.getText();
       
       if(check.isEmpty())
       {
           jTextArea4.setText("Non ci sono territori\nnemici confinanti!");
       }
       
    }
    
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     // BOTTONE: PREPARA ALL'ATTACCO
     
    /* Dichiarazione variabili */
    Component err = null;
   
    /* Verifico che il giocatore abbia inserito un valore */
    if(jTextField3.getText().equals("") || jTextField4.getText().equals(""))
    {
       JOptionPane.showMessageDialog(err,"Verificare che il nome del territorio attaccante e/o attaccato sia stato inserito!","Attenzione",JOptionPane.WARNING_MESSAGE);    
    }
    else
    {
      Query dbms = new Query();
      /* Prelevo l'id della partita */   
      String idp = dbms.idPartita(MenuNewPartita.salvaPartita.nomePartita);
      
      /* Prelevo i territori scelti dal giocatore */
      String terr_att = jTextField3.getText();
      String terr_dif = jTextField4.getText();
      
      /* Prelevo i loro id territorio */
      int idterr_att = dbms.idTerritorio(terr_att);
      int idterr_dif = dbms.idTerritorio(terr_dif);
      
      /* Predo le rmate del territorio con cui il giocatore vuole attaccare */
      int armateInTerrAtt = dbms.armateInTerritorio(idp,idterr_att);
      
      /* Verifico che i due nomi inseriri appartengono a dei territori esistenti e che il numero di armate
         nel territorio in cui si vuole far partite l'attacco non abbia una sola armata
      */
      if(idterr_att == 0 || idterr_dif == 0 || armateInTerrAtt == 1 )
      {
        if(armateInTerrAtt == 1)
         {
           JOptionPane.showMessageDialog(err,"Non puoi attaccare usando il territorio \""+ terr_att +"\" perchè esso dispone di una sola armata!","Attenzione",JOptionPane.WARNING_MESSAGE);
         }
         else
         {
           JOptionPane.showMessageDialog(err,"Verificare la corettezza dei nomi dei territori inseriti!","Attenzione",JOptionPane.WARNING_MESSAGE);
         }
     }
     else
     {
       /* Verifico il giocatore in corso sia possessore del territorio da cui fa partite l'attacco */
       int terrconfinante = 0;
       /* Prelevo il giocatore occupante */
       int giocatore_occ = dbms.giocatoreOccupante(idp, idterr_att);
       /* Prelevo l'id del giocatore in corso */
       String stringTmp = jTextField10.getText();
       int giocatore_inCorso = Integer.parseInt(stringTmp);
       
       /* Verifico che i due id siano i medesimi */
       if(giocatore_occ != giocatore_inCorso)
       {
          String nik = dbms.nicknameGiocatore(String.valueOf(giocatore_occ),idp);
          JOptionPane.showMessageDialog(err,"Il territorio \""+ terr_att +"\" non è il tuo!\nAppartiene al giocatore: " + nik,"Attenzione",JOptionPane.WARNING_MESSAGE);          
       }
       else
       {
          /* Dichiarazione variabili */
          Connection conn = null;
          PreparedStatement rset = null;
          
          /* Procedo a verificare i due territori siano confinanti */
          try
          {       
             conn = ConnessioneDB.getDefaultConnection();
             rset = conn.prepareStatement("SELECT ID_CONFINANTE FROM CONFINE WHERE ((ID_TERRITORIO = ?) AND (ID_CONFINANTE = ?))");
             rset.setInt(1,idterr_att);
             rset.setInt(2,idterr_dif);
             ResultSet checkconfine = rset.executeQuery();
                        
             while(checkconfine.next())
             {
               terrconfinante = checkconfine.getInt("ID_CONFINANTE");         
             }
           }catch(SQLException e)
                {
                    catturaErrori(e);
                }finally 
                    { 
                      Query.conrsetClose(conn, rset);
                    }  
          /* Se pari a zero i due territori non comfinano */
          if(terrconfinante == 0)
           {
              JOptionPane.showMessageDialog(err,"Il territorio \""+ terr_att +"\" da cui far partire l'attacco non confina con il territorio \""+ terr_dif +"\"","Attenzione",JOptionPane.WARNING_MESSAGE);   
           }
          else /* I territori confinano */
           {
             /* Verifico che il giocatore non attacchi se stesso come un idiota */
             int g_difensore = dbms.giocatoreOccupante( idp , idterr_dif);
             String nik_dif = dbms.nicknameGiocatore(String.valueOf(g_difensore),idp);
                       
             if(giocatore_inCorso == g_difensore) 
             {
                 JOptionPane.showMessageDialog(err,"Stai attaccando un tuo stesso territorio! In questo gioco siamo contro l'autolesionismo!","Attenzione",JOptionPane.WARNING_MESSAGE);   
             }
             else  /* I territori confinano e il giocatore attacca un altro giocatore */
             {
                 /* 
                    Aggiorno i componenti e li setto in maniera tale da passare alla seconda
                    fase del lancio dei dadi.
                 */
                 SwingUtilities.updateComponentTreeUI(this);
                 jButton1.setEnabled(false);
                 jButton2.setEnabled(true);
                 jButton5.setEnabled(true);
                 /* Setto sia l'id che il nick del giocatore difensore */
                 jTextField5.setText(String.valueOf(g_difensore));
                 jTextField15.setText(nik_dif);
                 jTextField4.setEnabled(false);
                 jComboBox1.setEnabled(true);
                 jComboBox2.setEnabled(true);
                 jButton4.setEnabled(false);
                           
                 Insert ins = new Insert();
                 /* Provvedo ad inserire le infomazioni nel database */       
                 ins.insertCombattimento(idp, giocatore_occ, idterr_att, idterr_dif);
                 /* Le scrivo anche nel file */      
                 String fileNomeTerr = dbms.nomeTerritorio(String.valueOf(idterr_att));
                 String fileNomeTerr2 = dbms.nomeTerritorio(String.valueOf(idterr_dif));
                 Insert.logFile("Si prepara un attacco dal territorio " + fileNomeTerr + " al territorio " + fileNomeTerr2 + " del giocatore " + nik_dif);
               }
            }   
          }            
        }    
     }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // NUMERO DI DADI SCELTI DAL GIOCATORE ATTACCANTE
       
        /*
           Verifico con quanti dadi il giocatore vuole attaccatre.
           In base alla selezione si provvede ad aggiornare le componenti.
        */
        if(jComboBox1.getSelectedItem().toString().equals("1 Armata"))
        {
            SwingUtilities.updateComponentTreeUI(this);
            jTextField13.setEnabled(true);
            jTextField6.setEnabled(false);
            jTextField7.setEnabled(false);
        }
        
       if(jComboBox1.getSelectedItem().toString().equals("2 Armate"))
       {
           SwingUtilities.updateComponentTreeUI(this);
           jTextField6.setEnabled(true);
           jTextField13.setEnabled(true);
           jTextField7.setEnabled(false);
       }
        
      if(jComboBox1.getSelectedItem().toString().equals("3 Armate"))
      {
          SwingUtilities.updateComponentTreeUI(this);
          jTextField6.setEnabled(true);
          jTextField7.setEnabled(true);
          jTextField13.setEnabled(true);
      }
        
     if(jComboBox1.getSelectedItem().toString().equals("Seleziona numero armate"))
     {
        SwingUtilities.updateComponentTreeUI(this);
        jTextField6.setEnabled(false);
        jTextField7.setEnabled(false);
        jTextField13.setEnabled(false);
     }      
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // NUMERO DI DADI SCELTO DAL GIOCATORE DIFENSORE
        
     /*
         Verifico con quanti dadi il giocatore vuole difendersi.
         In base alla selezione si provvede ad aggiornare le componenti.
     */
     if(jComboBox2.getSelectedItem().toString().equals("1 Armata"))
     {
        SwingUtilities.updateComponentTreeUI(this);
        jTextField8.setEnabled(true);
        jTextField9.setEnabled(false);
        jTextField11.setEnabled(false);
     }
        
     if(jComboBox2.getSelectedItem().toString().equals("2 Armate"))
     {
        SwingUtilities.updateComponentTreeUI(this);
        jTextField9.setEnabled(true);
        jTextField8.setEnabled(true);
        jTextField11.setEnabled(false);
     }
        
     if(jComboBox2.getSelectedItem().toString().equals("3 Armate"))
     {
        SwingUtilities.updateComponentTreeUI(this);
        jTextField9.setEnabled(true);
        jTextField11.setEnabled(true);
        jTextField8.setEnabled(true);
     }
        
     if(jComboBox2.getSelectedItem().toString().equals("Seleziona numero armate"))
     {
       SwingUtilities.updateComponentTreeUI(this);
       jTextField9.setEnabled(false);
       jTextField11.setEnabled(false);
       jTextField8.setEnabled(false);
     }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // BOTTONE: CAMBIA TERRITORIO DA ATTACCARE
        
       /* Provvedo ad aggiornare le componenti e a scrivere nel file */
       SwingUtilities.updateComponentTreeUI(this);
       jButton1.setEnabled(true);
       jTextField4.setEnabled(true);  
       jComboBox1.setEnabled(false);
       jComboBox2.setEnabled(false);
       jTextField9.setEnabled(false);
       jTextField11.setEnabled(false);
       jTextField13.setEnabled(false);
       jTextField8.setEnabled(false);
       jTextField6.setEnabled(false);
       jTextField7.setEnabled(false);;
       jTextField6.setEnabled(false);
       jButton2.setEnabled(false);
       jButton4.setEnabled(true);
       Insert.logFile("Il giocatore ha deciso di cambiare il territorio da attaccare.");
       Insert.logFile("");                 
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // BOTTONE: ATTACCA
        
        /* Dichiarazione variabili */
        Component err = null;
        /* Valore dei dadi inseriti dall'utente */
        String dado1att = null;
        String dado2att = null;
        String dado3att = null;
        String dado1dif = null;
        String dado2dif = null;
        String dado3dif = null;
        /* Valore dadi convertiti in int */
        int dado1_att = 0;
        int dado2_att = 0;   
        int dado3_att = 0;
        int dado1_dif = 0;
        int dado2_dif = 0;
        int dado3_dif = 0;
        /* Flag di controllo */
        int checkdado = 0;
        int checkdado2 = 0;
        int checkdadoterr = 0;
        int checkdadoterr2 = 0;
        String check = null;
        int checkVuoto = 0;
        
        Query dbms = new Query();
        
        
     if(jComboBox1.getSelectedItem().toString().equals("1 Armata"))
     {
       check = jTextField13.getText();
       if(check.isEmpty() || check.equals("valore dado 1") )
       {
           checkVuoto = 1;      
       }
     }
     else
     {
        if(jComboBox1.getSelectedItem().toString().equals("2 Armate"))
         {
           check = jTextField13.getText();
           if(check.isEmpty() || check.equals("valore dado 1"))
           {
               checkVuoto = 1;      
           }
           else
           {
             check = jTextField6.getText();
              if(check.isEmpty() || check.equals("valore dado 2"))
             {
               checkVuoto = 1;      
             }          
           }      
        }
        else
        {
           check = jTextField13.getText();
           if(check.isEmpty() || check.equals("valore dado 1"))
           {
               checkVuoto = 1;      
           }
           else
           {
             check = jTextField6.getText();
             if(check.isEmpty() || check.equals("valore dado 2"))
             {
               checkVuoto = 1;      
             }
             else
             {
                 check = jTextField7.getText();
                 if(check.isEmpty() || check.equals("valore dado 3"))
                 {
                      checkVuoto = 1;      
                 }
             }
           }  
        
        }
     }
     
     if(jComboBox2.getSelectedItem().toString().equals("1 Armata"))
     {
       check = jTextField8.getText();
       if(check.isEmpty() || check.equals("valore dado 1"))
       {
           checkVuoto = 1;      
       }
     }
     else
     {
        if(jComboBox1.getSelectedItem().toString().equals("2 Armate"))
         {
           check = jTextField8.getText();
           if(check.isEmpty() || check.equals("valore dado 1"))
           {
               checkVuoto = 1;      
           }
           else
           {
             check = jTextField9.getText();
              if(check.isEmpty() || check.equals("valore dado 2"))
             {
               checkVuoto = 1;      
             }          
           }      
        }
        else
        {
           check = jTextField8.getText();
           if(check.isEmpty() || check.equals("valore dado 1"))
           {
               checkVuoto = 1;      
           }
           else
           {
             check = jTextField9.getText();
             if(check.isEmpty() || check.equals("valore dado 2"))
             {
               checkVuoto = 1;      
             }
             else
             {
                 check = jTextField11.getText();
                 if(check.isEmpty() || check.equals("valore dado 3"))
                 {
                      checkVuoto = 1;      
                 }
             }
           }  
        
        }
     }
     
        
        
        
  if(checkVuoto != 1)
  {
    /* Verifico che entrambi i giocatori abbiano seleziono un numero di dadi */
    if((jComboBox2.getSelectedItem().toString().equals("Seleziona numero armate")) || (jComboBox1.getSelectedItem().toString().equals("Seleziona numero armate")))
     {
         JOptionPane.showMessageDialog(err,"Sia attaccante che difensore devono specificare il numero di armate tramite l'apposito menu' a tendina!","Attenzione",JOptionPane.WARNING_MESSAGE);   
         checkdado = 1;
     }
     else
     {
         /* Verifico che il giocatore attaccante non attacchi con un'unica armata */
         String idp = dbms.idPartita(MenuNewPartita.salvaPartita.nomePartita);
         /* Prendo il territorio attaccante con le relative armate */
         String terr_att = jTextField3.getText();
         int idterr_att = dbms.idTerritorio(terr_att);
         int armateInTerrAtt = dbms.armateInTerritorio(idp,idterr_att);
         
         /* Prendo le medesime informazioni per il territorio difensore */
         String terr_dif = jTextField4.getText();
         int id_terr_dif = dbms.idTerritorio(terr_dif);
         int armateInTerrDif = dbms.armateInTerritorio(idp,id_terr_dif);
          
        /* Il giocatore attaccante non può attaccare da un territorio avente una sola armata */
        if(armateInTerrAtt == 1)
        {
            JOptionPane.showMessageDialog(err,"Non puoi attaccare usando il territorio  \""+ terr_att +"\" perchè esso dispone di una sola armata!","Attenzione",JOptionPane.WARNING_MESSAGE);
            checkdado = 1;
        }
        else
        { 
            /* 
               Verifico sia per l'attaccante che per il difensore il numero di dadi lanciati.
               In base a questi si controlla (tramite controlloDado) che il valore dei dadi sia
               nel renge stabilito tra 1-6. Successivamente si provvede a verificare (tramite controllo
               DadiArmate) che si disponga del numero esatto e/o maggiore di armate in base ai dadi.
               Infine le informazioni vengono scritte sul file.
            */
            if(jComboBox1.getSelectedItem().toString().equals("1 Armata"))
             {
                  dado1att = jTextField13.getText();
                  dado1_att = Integer.parseInt(dado1att);
                  checkdado = controlloDado(dado1_att);
                  checkdadoterr = controlloDadiArmate(1,armateInTerrAtt);
                  Insert.logFile("Il giocatore attaccante lancia 1 dado."); 
             }

             if(jComboBox1.getSelectedItem().toString().equals("2 Armate"))
             {
                 dado1att = jTextField13.getText();
                 dado1_att = Integer.parseInt(dado1att);
                 checkdado = controlloDado(dado1_att);

                    if(checkdado != 1)
                    {
                       dado2att = jTextField6.getText();
                       dado2_att = Integer.parseInt(dado2att);
                       checkdado = controlloDado(dado2_att);
                       checkdadoterr = controlloDadiArmate(2,armateInTerrAtt);
                       Insert.logFile("Il giocatore attaccante lancia 2 dadi."); 
                    }     
             }


             if(jComboBox1.getSelectedItem().toString().equals("3 Armate"))
             {
                 dado1att = jTextField13.getText();
                 dado1_att = Integer.parseInt(dado1att);
                 checkdado = controlloDado(dado1_att);

                 if(checkdado != 1)
                 {
                   dado2att = jTextField6.getText();
                   dado2_att = Integer.parseInt(dado2att);
                   checkdado = controlloDado(dado2_att);

                   if(checkdado != 1)
                   {
                     dado3att = jTextField7.getText();
                     dado3_att = Integer.parseInt(dado3att);
                     checkdado = controlloDado(dado3_att);
                     checkdadoterr = controlloDadiArmate(3,armateInTerrAtt);
                     Insert.logFile("Il giocatore attaccante lancia 3 dadi.");
                    }     
                 }
             }


             if(jComboBox2.getSelectedItem().toString().equals("1 Armata"))
             {
                dado1dif = jTextField8.getText();
                dado1_dif = Integer.parseInt(dado1dif);
                checkdado2 = controlloDado(dado1_dif);
                checkdadoterr2 = controlloDadiArmate(1,armateInTerrDif);
                Insert.logFile("Il giocatore difensore risponde lanciando 1 dado.");    
             }

             if(jComboBox2.getSelectedItem().toString().equals("2 Armate"))
             {
                dado1dif = jTextField8.getText();
                 
                dado1_dif = Integer.parseInt(dado1dif);
                checkdado2 = controlloDado(dado1_dif);

                if(checkdado != 1)
                {
                  dado2dif = jTextField9.getText();
                  dado2_dif = Integer.parseInt(dado2dif);
                  checkdado2 = controlloDado(dado2_dif);
                  checkdadoterr2 = controlloDadiArmate(2,armateInTerrDif);
                  Insert.logFile("Il giocatore difensore risponde lanciando 2 dadi.");
                }       
             }

            if(jComboBox2.getSelectedItem().toString().equals("3 Armate"))
            {
               dado1dif = jTextField8.getText();
               dado1_dif = Integer.parseInt(dado1dif);
               checkdado2 = controlloDado(dado1_dif);

               if(checkdado != 1)
               {
                  dado2dif = jTextField9.getText();
                  dado2_dif = Integer.parseInt(dado2dif);
                  checkdado2 = controlloDado(dado2_dif);

                  if(checkdado != 1)
                   {
                     dado3dif = jTextField11.getText();
                     dado3_dif = Integer.parseInt(dado3dif);
                     checkdado2 = controlloDado(dado3_dif);
                     checkdadoterr2 = controlloDadiArmate(3,armateInTerrDif);
                     Insert.logFile("Il giocatore difensore risponde lanciando 3 dadi.");
                   }
                }
            }
        }
    } 
   
   
    /* Verifico che siano lanciati almeni i primi due dadi e che a tali dadi siano associate un numero uguale/maggiore di armate */
    if((checkdado != 1) && (checkdadoterr != 1) && (checkdado2 != 1) && (checkdadoterr2 != 1))
    { 
       /* Dichiarazione variabili */
       Insert ins = new Insert();
       Update up = new Update();
       
       /* Prendo l'id della partita */
       String idp = jTextField2.getText();
       
       /* Effettuo l'inserimento dei dadi */
       ins.insertLancioDadi(idp, dado1att, dado2att, dado3att, dado1dif, dado2dif, dado3dif); 
       
       /* Eseguo la chiamata alla procedura per ottenere l'esito dello scontro */
       dbms.callVittoriaDadi(dado1att, dado2att, dado3att, dado1dif, dado2dif, dado3dif);
       
       /* Prendo l'id del turno */
       String idt = jTextField12.getText();
       /* Uso il turno per verificare che il giocatore abbia conquistato il territorio */
       String vinc = dbms.checkVincente(idp, idt);
       
       /* Se vinc è diverso da null allora il giocato ha coquistato il territorio */
       if(vinc != null) 
       {
         /* Tolgo la possibilità al giocatore di cliccare su attacca avendo conquistato il territorio */
         jButton2.setEnabled(false);
         /* Do la possibilità a giocatore di poter spostare tutte le armate */
         jButton6.setEnabled(true);
         /* Prendo il nome del territorio conquistato */
         String terr_conquistato = jTextField4.getText();

         /* Avverto l'utente e scrivo su file */
         JOptionPane.showMessageDialog(err,"Hai conquistato il territorio " + terr_conquistato + ".\nSono state spostate tante armate quanto il numero dei dadi lanciati.\nSe vuoi puoi spostare tutte le tua armate in " + terr_conquistato + " lasciandone solo una nel terriorio con cui hai attaccato.","Congratulazioni",JOptionPane.INFORMATION_MESSAGE);
         Insert.logFile("Il giocatore attaccanrte ha conquistato il territorio " + terr_conquistato);    
         
         /* Verifico che ci sia un vintore o meno della partita */
         int vincitore = dbms.checkVincitore(MenuNewPartita.salvaPartita.nomePartita);
         
         /* Se è diverso sa zero allora significa che c'è un vincitore */
         if(vincitore != 0)
         {
           /* Prendo il nik del giocatore vincitore */
           String nik_vinc = dbms.nicknameGiocatore(String.valueOf(vincitore),idp);
           
           /* Informo l'utente della vittoria, scrivo su file e chiamo il form per ritornare al menu principale */
           JOptionPane.showMessageDialog(err,"Fantastico! Abbiamo un vincitore!\nIl giocatore " + nik_vinc + " si è dimostrato il miglior combattente in campo.\nLa partita è conclusa, si tornerà al menù principale di gioco.","Congratulazioni",JOptionPane.INFORMATION_MESSAGE);
           Insert.logFile("E' stato proclamato un vincitore! Il giocatore " + nik_vinc + " si è dimostrato il miglior combattente in campo.");
           Insert.logFile("La partita " + MenuNewPartita.salvaPartita.nomePartita + " è conclusa.");
           Insert.logFile("");
           Insert.logFile("");
           this.setVisible(false);
           dispose(); 
           java.awt.EventQueue.invokeLater(new Runnable() {
           public void run() {
           new MenuBase().setVisible(true);
                }
                  }); 
           }
           
           /* Controllo che il giocatore che ha perso il territorio abbia perso anche la partita */
           String g_perdente = jTextField5.getText();
           /* Il risultato restituisce il numero di territorio possedute dal giocatore */
           int perdente = dbms.callCheckGamerInGame(idp,g_perdente);
           /* Prendo le armate presenti e le setto */
           int armate_totali = dbms.sommArmate(idp,g_perdente);
           up.upDecrArmate(idp, g_perdente , armate_totali);
           
           /* Se zero allora il giocatore non possiede più territori */
           if(perdente == 0)
           {
              /* Prendo il nik del giocatore perdente, informo tramite messaggio e inserisco le info nel file*/
              String nik_perd = dbms.nicknameGiocatore(g_perdente,idp);
              JOptionPane.showMessageDialog(err,"Putroppo il giocatore " + nik_perd + " ha perso.","Oh no!",JOptionPane.INFORMATION_MESSAGE);
              Insert.logFile("Il giocatore " + nik_perd + " ha perso.");
              Insert.logFile("");
           }
           
       }   
         /* Dichiarazione variabili */
         Connection conn = null;
         PreparedStatement rset = null;
         
         /* Avendo coqnuistato il territorio provvedo ad aggungerlo alla lista dei suoi territori */
         /* Pulisco tutto */
         jTextArea1.setText("");
         jTextArea2.setText("");
         jTextArea4.setText("");
         jTextArea3.setText("");
         jTextArea5.setText("");
         /* Prendo l'id del giocatore, sommo le armate e setto i valori*/
         String id_gamer = jTextField10.getText();
         int armate_totali = dbms.sommArmate(idp,id_gamer);
         up.upDecrArmate(idp, id_gamer , armate_totali);
   
        try
          {             
             /* Procedo a mostrare tutti i territori e le relative armate */
             conn = ConnessioneDB.getDefaultConnection();
             rset = conn.prepareStatement("SELECT ID_TERRITORIO, QUANTITA_TRUPPE FROM TERRITORIO_OCCUPATO WHERE ((GIOCATORE_OCCUPANTE = ?) AND (ID_PARTITA = ?))");
             rset.setString(1,id_gamer);
             rset.setString(2,idp);
             ResultSet id_territorio_del_giocatore = rset.executeQuery();

             while(id_territorio_del_giocatore.next())
              {
                 String id_territorio = id_territorio_del_giocatore.getString("ID_TERRITORIO");
                 int quantita_truppe = id_territorio_del_giocatore.getInt("QUANTITA_TRUPPE");

                 String nome_territorio = dbms.nomeTerritorio(id_territorio);

                 jTextArea1.append(nome_territorio + "\n");
                 jTextArea2.append(quantita_truppe + "\n");
              }

          }catch(SQLException e)
             {
               catturaErrori(e);
             }finally 
                    { 
                       Query.conrsetClose(conn, rset);
                    } 
        
        /* Prendo il nome e poi l'id territorio */ 
        String nome_terr = jTextField3.getText();
        int id_terr = dbms.idTerritorio(nome_terr);
        String colore = null;
        String idg = jTextField10.getText();
        
        try
        {     
           /* Aggiorno anche i territori nemici escludendo i territori appartenenti al giocatore */
           conn = ConnessioneDB.getDefaultConnection();
           rset = conn.prepareStatement("SELECT NOME_TERRITORIO, ID_TERRITORIO FROM TERRITORIO WHERE ID_TERRITORIO IN (SELECT ID_CONFINANTE FROM CONFINE WHERE ID_TERRITORIO = ?)");
           rset.setInt(1,id_terr);
           ResultSet conf = rset.executeQuery();
                   
           while(conf.next())
           {
             String nome_territorio = conf.getString("NOME_TERRITORIO");
             int id_territorio = conf.getInt("ID_TERRITORIO");
                        
             conn = ConnessioneDB.getDefaultConnection();
             rset = conn.prepareStatement("SELECT GIOCATORE_OCCUPANTE, QUANTITA_TRUPPE FROM TERRITORIO_OCCUPATO WHERE ((ID_PARTITA = ?) AND (ID_TERRITORIO = ?) AND (GIOCATORE_OCCUPANTE <> ?))");
             rset.setString(1,idp);
             rset.setInt(2,id_territorio);
             rset.setString(3,idg);
             ResultSet terr = rset.executeQuery();
                        
             while(terr.next())
             {
               String g_occ = terr.getString("GIOCATORE_OCCUPANTE");
               String q_truppe = terr.getString("QUANTITA_TRUPPE");
               
               /* Mostro anche il colore dei giocatori nemici */
               conn = ConnessioneDB.getDefaultConnection();
               rset = conn.prepareStatement("SELECT COLORE FROM GIOCATORE WHERE ((ID_PARTITA = ?) AND (ID_GAMER = ?))");
               rset.setString(1,idp);
               rset.setString(2,g_occ);
               ResultSet color = rset.executeQuery();
                             
               while(color.next())
                {
                  colore = color.getString("COLORE");    
                }
      
                jTextArea4.append(nome_territorio + "\n");  
                jTextArea3.append(q_truppe + "\n");   
                jTextArea5.append(colore + "\n"); 
               }                       
             }
        }catch(SQLException e)
                {
                    catturaErrori(e);
                }finally 
                    { 
                      Query.conrsetClose(conn, rset);
                    }     
    } // Fine if principale 
  }  
   else
      JOptionPane.showMessageDialog(err,"Non si può inserire un campo nullo!","Attenzione",JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_jButton2ActionPerformed
   
    private void jTextField13KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField13KeyTyped
        // KEY TYPED PER IL DADO 1 ATTACCANTE PER EVITARE INSERIMENTI DI CARATTERI
        
        /* Dichiarazione variabili */
        char vchar = evt.getKeyChar();
        
        if(!(Character.isDigit(vchar)) || (vchar == KeyEvent.VK_BACK_SPACE) || (vchar == KeyEvent.VK_DELETE))
        {
           evt.consume();
        } 
        if(jTextField13.getText().length()>= 1) evt.consume();
    }//GEN-LAST:event_jTextField13KeyTyped

    private void jTextField6KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyTyped
        // KEY TYPED PER IL DADO 2 ATTACCANTE PER EVITARE INSERIMENTI DI CARATTERI
        
        /* Dichiarazione variabili */
        char vchar = evt.getKeyChar();
        
        if(!(Character.isDigit(vchar)) || (vchar == KeyEvent.VK_BACK_SPACE) || (vchar == KeyEvent.VK_DELETE))
        {
           evt.consume();
        } 
        if(jTextField6.getText().length()>= 1) evt.consume();
    }//GEN-LAST:event_jTextField6KeyTyped

    private void jTextField7KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField7KeyTyped
        // KEY TYPED PER IL DADO 3 ATTACCANTE PER EVITARE INSERIMENTI DI CARATTERI
        
        /* Dichiarazione variabili */
        char vchar = evt.getKeyChar();
        
        if(!(Character.isDigit(vchar)) || (vchar == KeyEvent.VK_BACK_SPACE) || (vchar == KeyEvent.VK_DELETE))
        {
           evt.consume();
        } 
        if(jTextField7.getText().length()>= 1) evt.consume();
    }//GEN-LAST:event_jTextField7KeyTyped

    private void jTextField8KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField8KeyTyped
        // KEY TYPED PER IL DADO 1 DIFENSORE PER EVITARE INSERIMENTI DI CARATTERI
        
        /* Dichiarazione variabili */
        char vchar = evt.getKeyChar();
        
        if(!(Character.isDigit(vchar)) || (vchar == KeyEvent.VK_BACK_SPACE) || (vchar == KeyEvent.VK_DELETE))
        {
           evt.consume();
        } 
        if(jTextField8.getText().length()>= 1) evt.consume();
    }//GEN-LAST:event_jTextField8KeyTyped

    private void jTextField9KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField9KeyTyped
        // KEY TYPED PER IL DADO 2 DIFENSORE PER EVITARE INSERIMENTI DI CARATTERI
        
        /* Dichiarazione variabili */
        char vchar = evt.getKeyChar();
        
        if(!(Character.isDigit(vchar)) || (vchar == KeyEvent.VK_BACK_SPACE) || (vchar == KeyEvent.VK_DELETE))
        {
           evt.consume();
        } 
        if(jTextField9.getText().length()>= 1) evt.consume();
    }//GEN-LAST:event_jTextField9KeyTyped

    private void jTextField11KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField11KeyTyped
        // KEY TYPED PER IL DADO 2 DIFENSORE PER EVITARE INSERIMENTI DI CARATTERI
        
        /* Dichiarazione variabili */
        char vchar = evt.getKeyChar();
        
        if(!(Character.isDigit(vchar)) || (vchar == KeyEvent.VK_BACK_SPACE) || (vchar == KeyEvent.VK_DELETE))
        {
           evt.consume();
        } 
        if(jTextField11.getText().length()>= 1) evt.consume();
    }//GEN-LAST:event_jTextField11KeyTyped

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // BOTTONE: SPOSTA TUTTE LE ARMATE 
        
        /* Dichiarazione variabili */
        Update up = new Update();
        Query dbms = new Query();
        Component err = null;
        
        /* Prendo l'id della partita */
        String idp = jTextField2.getText(); 
        
        /* Prendo l'id del giocatore */
        String id_gamer = jTextField10.getText(); 
        
        /* Prendo l'id turno */
        String idt = jTextField12.getText();
        
        /* Prendo l'id del combattimento */
        int id_comb = dbms.idCombattimento(idp,idt);
        
        /* Prendo il nome del territorio di partenza */
        String territorio = jTextField3.getText(); 
        
        /* Prendo l'id del territorio */
        int idterr = dbms.idTerritorio(territorio);
        
        /* Prendo le armate presenti sul territorio di partenza */
        int armate_presenti = dbms.armateInTerritorio(idp,idterr);
        //System.out.println("->IDP:" + idp + " IDG:" + idt + " IDCOM:" + id_comb);
        
        /* Se il territorio possiede una sola armata viene bloccato lo spostamento */
        if(armate_presenti == 1)
        {
           JOptionPane.showMessageDialog(err,"Non puoi spostare nessuna armata dal territorio \"" + territorio + "\" perchè ne ha una sola!","Congratulazione",JOptionPane.WARNING_MESSAGE);
        }
        else /* E' possibile spostare almeno un'armata */
        {
          /* Sposto tutte le armate*/
          up.upSpostaAllArmate(idp, idt, id_comb);
           
          /* Scrivo nel file log */
          Insert.logFile("Sono state spostate tutte le armate dal territorio iniziale a quello conquistato.");
          Insert.logFile("");
           
          /* Dichiarazione varabili */
          Connection conn = null;
          PreparedStatement rset = null;
          /* Pulisco le aree dei territori e delle armate per poterle aggiornare */
          jTextArea1.setText("");
          jTextArea2.setText("");
            
         try
         {       
           /* Interrogazione per mostrare i territori e le relative armate del giocatore */
           conn = ConnessioneDB.getDefaultConnection();
           rset = conn.prepareStatement("SELECT ID_TERRITORIO, QUANTITA_TRUPPE FROM TERRITORIO_OCCUPATO WHERE ((GIOCATORE_OCCUPANTE = ?) AND (ID_PARTITA = ?))");
           rset.setString(1,id_gamer);
           rset.setString(2,idp);
           ResultSet id_territorio_del_giocatore = rset.executeQuery();

           while(id_territorio_del_giocatore.next())
           {
             String id_territorio = id_territorio_del_giocatore.getString("ID_TERRITORIO");
             int quantita_truppe = id_territorio_del_giocatore.getInt("QUANTITA_TRUPPE");

             String nome_territorio = dbms.nomeTerritorio(id_territorio);

             jTextArea1.append(nome_territorio + "\n");
             jTextArea2.append(quantita_truppe + "\n");
           }
         }catch(SQLException e)
             {
               catturaErrori(e);
             }finally 
                    { 
                       Query.conrsetClose(conn, rset);
                    }     
          
         
         String nome_terr = jTextField3.getText();
         int id_terr = dbms.idTerritorio(nome_terr);
         String colore = null;
         String idg = jTextField10.getText();
         jTextArea4.setText("");
         jTextArea3.setText("");
         jTextArea5.setText("");
         
         try
         { 
           /* Aggiorno i dati dei territori nemici */
           conn = ConnessioneDB.getDefaultConnection();
           rset = conn.prepareStatement("SELECT NOME_TERRITORIO, ID_TERRITORIO FROM TERRITORIO WHERE ID_TERRITORIO IN (SELECT ID_CONFINANTE FROM CONFINE WHERE ID_TERRITORIO = ?)");
           rset.setInt(1,id_terr);
           ResultSet conf = rset.executeQuery();
                   
           while(conf.next())
           {
            /*  Verifico che i territori confinanti non appartengono al giocatore */
            String nome_territorio = conf.getString("NOME_TERRITORIO");
            int id_territorio = conf.getInt("ID_TERRITORIO");
                       
            conn = ConnessioneDB.getDefaultConnection();
            rset = conn.prepareStatement("SELECT GIOCATORE_OCCUPANTE, QUANTITA_TRUPPE FROM TERRITORIO_OCCUPATO WHERE ((ID_PARTITA = ?) AND (ID_TERRITORIO = ?) AND (GIOCATORE_OCCUPANTE <> ?))");
            rset.setString(1,idp);
            rset.setInt(2,id_territorio);
            rset.setString(3,idg);
            ResultSet terr = rset.executeQuery();
                        
            while(terr.next())
            {
              String g_occ = terr.getString("GIOCATORE_OCCUPANTE");
              String q_truppe = terr.getString("QUANTITA_TRUPPE");
              /* Provvedo a mostrare anche i colori dei nemici */
              conn = ConnessioneDB.getDefaultConnection();
              rset = conn.prepareStatement("SELECT COLORE FROM GIOCATORE WHERE ((ID_PARTITA = ?) AND (ID_GAMER = ?))");
              rset.setString(1,idp);
              rset.setString(2,g_occ);
              ResultSet color = rset.executeQuery();
                             
              while(color.next())
              {
                colore = color.getString("COLORE");    
              }
      
             jTextArea4.append(nome_territorio + "\n");  
             jTextArea3.append(q_truppe + "\n");   
             jTextArea5.append(colore + "\n"); 
            }
         }
        }catch(SQLException e)
          {
            catturaErrori(e);
          }finally 
           { 
            Query.conrsetClose(conn, rset);
           }        
        }
          
      /* Gestisco le compomenti */   
      jButton4.setEnabled(true);
      jButton6.setEnabled(false);
      jButton2.setEnabled(false);
      jButton5.setEnabled(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // BOTTONE: FINISCI I COMBATTIMENTI
        
        /* Scrivo su file della fine dei combattimenti */
        Insert.logFile("");
        Insert.logFile("Combattimenti terminati.");
        Insert.logFile("");
        /* Provvedo a chiamare l'utima fase Spostamento */
        this.setVisible(false);
        dispose(); 
        java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            new Spostamento().setVisible(true);
        }
          });     
    }//GEN-LAST:event_jButton4ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // CHIUSURA APPLICATIVO MEDIANTE LA X
        
        /* Dichiarazione variabili */
        Component err = null;
        
        JOptionPane.showMessageDialog(err,"La partita è stata salvata.\nPuoi riprenderla quando vuoi usando Riprendi Partita nel menù principale!\n\nRicorda: se hai già effettuato un combattimento (anche senza lanciare i dadi) tale fase si considera come conclusa\ne partirai dall'ultima fase di spostamento. ","Chiusura nella fase Combattimento",JOptionPane.INFORMATION_MESSAGE);
        Insert.logFile("");
        Insert.logFile("La partita è stata sospesa.");
        Insert.logFile("");
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // BOTTONE: ?
        
        /* Dichiarazione variabili */
        Component inf = null;
        JOptionPane.showMessageDialog(inf,"Il giocatore deve selezionare uno dei suoi territori da cui far partire l'attacco inserendo il nome in \"Nome territorio attaccante\".\nSuccessivamente cliccando su \"Mostra confini nemici\" vengono visualizzati, se presenti,"
                 + " i territori nemici.\nSelezionato anche il territorio da attaccare si deve cliccare su \"Prepara all'attacco\" per poi passare alla fase del lancio dei dadi. In questa fase i giocatori devono selezionare\n"
                 + "il numero di armare con cui attaccare e difendersi. Scelti il numero di armate possono essere inseriti i valori attribuiti ai dadi lanciati e cliccare su attacca.\n"
                 + "Ottenuto l'esito del combattimento, se si è conquistato il territorio, verranno spostate numero di armate pari al numero di dadi lanciati. Il giocatore può anche scegliere se\nspostare tutte le armate. Caso in cui il territorio"
                 + " non venga conquistato è possibile continuare gli attacchi cliccando nuovamente su attacca.\n\n<html><b>Gli attacchi o l'intera fase possono essere terminati cliccando su \"Finisci i combattimenti\".</b></html>"
                 ,"?",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton7ActionPerformed

 /* Funzione adibita per la verifica della correttezza del nome del territorio */
 public static int verificaTerritorio(char c)
  {
      int i = 0;
      
      if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c == ' ') || (c == 'ì') || (c == 'ù')) 
         i = 1;
      
      return i;
  }
 
    
    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
        // KEY TYPED PER L'INSERIMENTO CORRETTO DEL NOME DEL TERRITORIO ATTACCANTE
      
 
       /* Prendo il carattere digitato */
       char c = evt.getKeyChar();
       /* Verifico che sia accettabile */
       int i = verificaTerritorio(c);
       /* Carattere non consono lo scarto */
       if(i != 1) evt.consume();
       /* Imposto lunghezza massima di 30 caratteri */
       if(jTextField3.getText().length()>= 30) evt.consume();    
    }//GEN-LAST:event_jTextField3KeyTyped

    private void jTextField4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyTyped
      // KEY TYPED PER L'INSERIMENTO CORRETTO DEL NOME DEL TERRITORIO ATTACCATO
        
       /* Prendo il carattere digitato */
       char c = evt.getKeyChar();
       /* Verifico che sia accettabile */
       int i = verificaTerritorio(c);
       /* Carattere non consono lo scarto */
       if(i != 1) evt.consume();
       /* Imposto lunghezza massima di 30 caratteri */
       if(jTextField4.getText().length()>= 30) evt.consume();   
    }//GEN-LAST:event_jTextField4KeyTyped

    private void jTextField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyPressed
        // KEY PRESSED PER IL TERRITORIO ATTACCANTE 
        
        /* Elimino la possibilità di usare incolla */
        jTextField3.setTransferHandler(null);
    }//GEN-LAST:event_jTextField3KeyPressed

    private void jTextField4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyPressed
        // KEY PRESSED PER IL TERRITORIO ATTACCATO
        
        /* Elimino la possibilità di usare incolla */
        jTextField4.setTransferHandler(null);
    }//GEN-LAST:event_jTextField4KeyPressed

    private void jTextField13KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField13KeyPressed
        // KEY PRESSED PER IL DADO 1 ATTACCANTE
       
        /* Elimino la possibilità di usare incolla */
        jTextField13.setTransferHandler(null);
    }//GEN-LAST:event_jTextField13KeyPressed

    private void jTextField6KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyPressed
        // KEY PRESSED PER IL DADO 2 ATTACCANTE
        
        /* Elimino la possibilità di usare incolla */
        jTextField6.setTransferHandler(null);
    }//GEN-LAST:event_jTextField6KeyPressed

    private void jTextField7KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField7KeyPressed
        // KEY PRESSED PER IL DADO 3 ATTACCANTE
        
        /* Elimino la possibilità di usare incolla */
        jTextField7.setTransferHandler(null);
    }//GEN-LAST:event_jTextField7KeyPressed

    private void jTextField8KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField8KeyPressed
        // KEY PRESSED PER IL DADO 1 DIFENSORE
        
        /* Elimino la possibilità di usare incolla */
        jTextField8.setTransferHandler(null);
    }//GEN-LAST:event_jTextField8KeyPressed

    private void jTextField9KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField9KeyPressed
        // KEY PRESSED PER IL DADO 2 DIFENSORE
        
        /* Elimino la possibilità di usare incolla */
        jTextField9.setTransferHandler(null);
    }//GEN-LAST:event_jTextField9KeyPressed

    private void jTextField11KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField11KeyPressed
         // KEY PRESSED PER IL DADO 3 DIFENSORE
        
        /* Elimino la possibilità di usare incolla */
        jTextField11.setTransferHandler(null);
    }//GEN-LAST:event_jTextField11KeyPressed
   
   /* Funzione per la verifica del valore dei dadi inseriti dai giocatori */
   public int controlloDado(int dado)
   {
     /* Dichiarazione variabili */
     int appost = 0;
     
     /* A valori non giusti informo l'utente e invio il valore alla funzione chiamante per evitare di proseguire con altre azioni */
     if(dado < 1 || dado > 6)
      {
        appost = 1;
        Component err = null;
        JOptionPane.showMessageDialog(err,"Verificare che i dadi comprendono valori da 1 a 6!","Attenzione",JOptionPane.WARNING_MESSAGE);
      }
     return appost;
    }
   
    /* Funzione per la verifica che il numero di dadi lanaciati siano dello stesso numero di armate presenti nel territorio */
    public int controlloDadiArmate(int dadi_lanciati, int armate_terr)
    {
        /* Dichiarazione variabili */
        int v = 0;
        
        if(dadi_lanciati > armate_terr)
        {
          v = 1;
          Component err = null;
          JOptionPane.showMessageDialog(err,"Attaccante e/o difensore vogliono lanciare un numero di dadi maggiore delle armate presenti nei territori!","Attenzione",JOptionPane.WARNING_MESSAGE);
        }     
     return v; // FOR VENDETTA 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Combattimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Combattimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Combattimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Combattimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Combattimento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
